


(reset-symbol-counter!)
(check-equal "alpha-convert: single method"
             `(%method x_1 (a_2) 1)
             (alpha-convert
              (macroexpand-all
               '(%method x (a) 1)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: nested methods"
             `((%method x_1 (a_2)
                 ((%method y_3 (a_4)
                    a_4)
                  a_2))
               1)
             (alpha-convert
              (macroexpand-all
               '((%method x (a)
                   ((%method y (a)
                      a)
                    a))
                 1)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: define"
             `(%begin
               (%define a_1)
               (%method x_2 (a_3)
                 a_3))
             (alpha-convert
              (macroexpand-all
               '(%begin
                 (%define a)
                 (%method x (a)
                   a))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: single bind"
             `(%bind (x_1 1) x_1)
             (alpha-convert
              (macroexpand-all
               '(bind ((x 1)) x)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: nested bind"
             `(%bind (x_2 (%bind (x_1 1) x_1)) x_2)
             (alpha-convert
              (macroexpand-all
               '(bind ((x (bind ((x 1)) x))) x)
               *environment*)
              *environment*))


(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all '(bind ((c 1))
                            (bind ((a 2)
                                   (b 3))
                              (- 1 c)
                              (+ a b)))
                         *environment*)))

  (check-equal ""
               `(%bind (c 1)
                  (%bind (a 2)
                    (%bind (b 3)
                      (%begin
                       (%minus 1 c)
                       (%plus a b)))))
               expanded)
  (check-equal ""
               `(%bind (c_1 1)
                  (%bind (a_2 2)
                    (%bind (b_3 3)
                      (%begin
                       (%minus 1 c_1)
                       (%plus a_2 b_3)))))
               (alpha-convert expanded
                              *environment*)))

(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all '((method (a b)
                             (+ a b))
                           1 2)
                         *environment*)))

  (check-equal ""
               `((%method $1 (a b)
                   (%plus a b))
                 1 2)
               expanded)
  (reset-symbol-counter!)
  (check-equal ""
               `((%method $1_1 (a_2 b_3)
                   (%plus a_2 b_3))
                 1 2)
               (alpha-convert expanded
                              *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: simple expression"
             `(+ 1 2)
             (normalize-term
              `(+ 1 2)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested expression"
             `(+ (- 2 1) 2)
             (normalize-term `(+ (- 2 1) 2)
                             *environment*))

(reset-symbol-counter!)
(check-equal "ANF: bind"
             `(%bind ($1 (%plus 2 2))
                (%bind (x 1)
                  (%bind ($2 (f x))
                    (%plus $1 $2))))
             (normalize-term
              (macroexpand-all
               '(+ (+ 2 2)
                   (bind ((x 1))
                     (f x)))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: begin 1"
             `(%begin
               1
               (%begin
                (%plus 2 2)
                (%bind ($1 (%minus 3 3))
                  (%bind (x 1)
                    (%bind ($2 (f x))
                      (%plus $1 $2))))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (+ (begin (+ 2 2) (- 3 3))
                    (bind ((x 1))
                      (f x))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if: trivial expressions"
             `(%if (= n 0)
                   1
                   (%times n (f (%minus n 1))))
             (normalize-term
              (macroexpand-all
               '(if (= n 0)
                    1
                    (* n (f (- n 1))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: application"
             (bind ((apply (symbol "apply" "ralph/compiler.test")))
               `(%bind (id (%method $1 (x) x))
                  (%bind (,apply (%method $2 (f x) (f x)))
                    ((id ,apply) (id 3)))))
             (normalize-term
              (macroexpand-all
               '(bind ((id (method (x) x))
                       (apply (method (f x) (f x))))
                  ((id apply) (id 3)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: method"
             `(%method $1 (a)
                (%method $2 (b)
                  (%begin
                   (%minus a b)
                   (%plus (%minus a b) b))))
             (normalize-term
              (macroexpand-all
               '(method (a)
                  (method (b)
                    (- a b)
                    (+ (- a b) b)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin 2"
             `(%begin
               1
               (%begin
                (c)
                (%begin
                 (b (%plus 1 (a)))
                 (%begin
                  5
                  (%minus (d) 23)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (begin
                  (c)
                  (b (+ 1 (a))))
                 5
                 (- (d) 23))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested set!"
             `(%begin
               (%set a (%plus (%minus b 3) c))
               (%set x (%times (%set z a) 5)))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z a) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression"
             `(foo-setter x (%plus 2 3))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: nested set! with if"
             `(%begin
               (%set a (%plus (%minus b 3) c))
               (%bind ($1 (%if a b c))
                 (%bind ($2 (%set z $1))
                   (%bind ($3 (%times $2 5))
                     (%set x $3)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z (if a b c)) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression and keywords"
             `(foo-setter x (%plus 2 3)
                         animated?: (> (bar x) 1))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3)
                      animated?: (> (bar x) 1))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: or"
             ;; usage of %if as expression OK,
             ;; not in statement form yet
             `(%bind ($1 #f)
                (%bind ($3 (%if $1
                                  $1
                                  (%bind ($2 2)
                                    (%if $2 $2 3))))
                  (foo $3 bar)))
             (normalize-term
              (macroexpand-all
               '(foo (or #f 2 3) bar)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while"
             `(%bind (counter 5)
                (%bind (result 1)
                  (%begin
                   (%while (> counter 0)
                     (%begin
                      (%set factorial (%times factorial counter))
                      (%set counter (%minus counter 1))))
                   counter)))
             (normalize-term
              (macroexpand-all
               '(bind ((counter 5)
                       (result 1))
                  (while (> counter 0)
                    (set! factorial (* factorial counter))
                    (set! counter (- counter 1)))
                  counter)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while as expression"
             `(%bind (run? #t)
                (%bind (value (%while run?
                                   (%begin
                                    (foo)
                                    (%begin
                                     (%set run? #f)
                                     23))))
                  (binary== value #f)))
             (normalize-term
              (macroexpand-all
               '(bind ((run? #t)
                       (value
                        (while run?
                          (foo)
                          (set! run? #f)
                          23)))
                  (== value #f))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while in if"
             `(%bind ($1 (%while run?
                             (foo)))
                (%bind (x (%if $1 42 23))
                  (bar x)))
             (normalize-term
              (macroexpand-all
               '(bind ((x (if (while run?
                                (foo))
                              42
                              23)))
                  (bar x))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in while"
             `(%while #t
                (%begin
                 (%bind ($1 (foo))
                   (%bind ($2 (%if $1 $1 (bar)))
                     (%if $2
                          (baz)
                          (%native "break"))))))
             (normalize-term
              (macroexpand-all
               '(while (or (foo) (bar))
                  (baz))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin as expression"
             `(%bind ($1 (curry + 1))
                (%begin
                 1
                 (%bind ($2 (%plus 2 3))
                   ($1 $2 4))))
             (normalize-term
              (macroexpand-all
               '((curry + 1) (begin 1 (+ 2 3)) 4)
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: select"
             `(%bind ($1 x)
                (%bind ($2 (instance? $1 <array>))
                  (%bind ($3 (%if $2 $2 (instance? $1 <string>)))
                    (%if $3
                         (%begin
                          (print x)
                          (slice x 2))
                         (%if (instance? $1 <number>)
                              (%times x 23)
                              (%begin
                               (do-sth)
                               else))))))
             (normalize-term
              (macroexpand-all
               '(select x instance?
                  ((<array> <string>)
                   (print x)
                   (slice x 2))
                  ((<number>)
                   (* x 23))
                  (else:
                   (do-sth)
                   else))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in expression"
             `(%method $1 ()
                (bar (%method $2 (item)
                         (%bind ($3 (%if a b c))
                           (baz $3 item)))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         (baz (if a b c)
                              item))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in expression 2"
             `(%method $1 ()
                (bar (%method $2 (item)
                         (%bind ($3 (%if c b a))
                           (%bind ($4 (%if a b c))
                             ($3 $4 item))))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         ((if c b a)
                          (if a b c)
                          item))))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: while in if in exp"
             `(%bind ($1 (%while run? (foo)))
                (%bind ($2 (%if $1 42 23))
                  (foo $2)))
             (normalize-term
              (macroexpand-all
               `(foo (if (while run?
                           (foo))
                         42
                         23))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "statements: or"
             `(%bind ($1 #f)
                (%bind ($3 #f)
                  (%begin
                   (%if ((%native "$T") $1)
                        (%set $3 $1)
                        (%bind ($2 2)
                          (%if ((%native "$T") $2)
                               (%set $3 $2)
                               (%set $3 3))))
                   (foo $3 bar))))
              (transform-statements!
               (normalize-term
                (macroexpand-all
                 `(foo (or #f 2 3) bar)
                 *environment*)
                *environment*)
               *environment*))

(reset-symbol-counter!)
(check-equal "statements: if exp. in if stmt."
             `(%bind ($1 #f)
                (%begin
                 (%if ((%native "$T") a)
                      (%set $1 1)
                      (%set $1 2))
                 (%if ((%native "$T") $1)
                      3
                      4)))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 `(if (if a 1 2) 3 4)
                 *environment*)
                *environment*)
               *environment*))

(reset-symbol-counter!)
(check-equal "statements: while exp. in while stmt."
             `(%while ((%native "$T") (> a 2))
                (%bind (a #f)
                  (%begin
                   (%begin
                    (%while ((%native "$T") (< b 3))
                      (%if ((%native "$T") a)
                           (%bind (c #f)
                             (%begin
                              (%if ((%native "$T") c)
                                   (%set c 5)
                                   (%set c 6))
                              c))
                           #f))
                    (%set a #f))
                   4)))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 '(while (> a 2)
                    (bind ((a (while (< b 3)
                                (if a
                                    (bind ((c (if c 5 6)))
                                      c)
                                    #f))))
                      4))
                 *environment*)
                *environment*)
               *environment*))


(reset-symbol-counter!)
(check-equal "statements: value of while applied to method"
             `(%bind (y 5)
                (%bind ($2 (%method $1 (x)
                             (%if ((%native "$T") x)
                                  (%return 1)
                                  (%return 2))))
                  (%bind ($3 #f)
                    (%begin
                     (%begin
                      (%while ((%native "$T") (> y 2))
                        (%set y (%minus y 1)))
                      (%set $3 #f))
                     ($2 $3)))))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 '(bind ((y 5))
                    ((method (x) (if x 1 2))
                     (while (> y 2)
                       (dec! y))))
                 *environment*)
                *environment*)
               *environment*))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: simple"
               `(%bind ($1 (%symbol "a"))
                  $1)
               (lift-symbols
                (macroexpand-all
                 '(begin (symbol "a"))
                 module)
                module)))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: multiple uses"
               `(%bind ($1 (%symbol "a"))
                  (%bind ($2 (%symbol "b"))
                    (%bind ($3 (%symbol "c"))
                      (%bind (a $1)
                        (%bind (b $2)
                          (foo a $1 b $2 $3))))))
               (lift-symbols
                (macroexpand-all
                 '(bind ((a (symbol "a"))
                         (b (symbol "b")))
                    (foo
                     a (symbol "a")
                     b (symbol "b")
                     (symbol "c")))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: bind"
               (bind ((sym (symbol "symbol" "ralph/compiler.test")))
                 `(%bind ($1 (%symbol "a"))
                    (%begin
                     $1
                     (%bind (,sym "a")
                       (%bind (a (,sym "a"))
                         (foo a (,sym "a")))))))
               (lift-symbols
                (macroexpand-all
                 '(begin
                   (symbol "a")
                   (bind ((symbol "a"))
                     (bind ((a (symbol "a")))
                       (foo a (symbol "a")))))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: method"
               `(%bind ($2 (%symbol "a"))
                  (%begin
                   23
                   (%method $1 (x)
                     $2)))
               (lift-symbols
                (macroexpand-all
                 '(begin
                   23
                   (method (x)
                     (symbol "a")))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: method 2"
               (bind ((sym (symbol "symbol" "ralph/compiler.test")))
                 `(%method $1 (,sym)
                    ,sym))
               (lift-symbols
                (macroexpand-all
                 '(method (symbol)
                    symbol)
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: set!"
               `(%bind ($1 (%symbol "b"))
                  (symbol-setter "a" $1))
               (lift-symbols
                (macroexpand-all
                 '(set! (symbol "a")
                        (symbol "b"))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: begin, if, while"
               `(%bind ($1 (%symbol "a"))
                  (%bind ($2 (%symbol "b"))
                    (%bind ($3 (%symbol "c"))
                      (%begin
                        (%if $1
                             (%while (bar $2)
                               (%begin $1 23 $3))
                             $3)
                        $2))))
               (lift-symbols
                (macroexpand-all
                 '(begin
                   (if (symbol "a")
                       (while (bar (symbol "b"))
                         (symbol "a")
                         23
                         (symbol "c"))
                       (symbol "c"))
                   (symbol "b"))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "flatten-statements!"
               `(%begin
                 (%var ($1 (%symbol "a"))
                       ($2 (%symbol "b"))
                       ($3 (%symbol "c")))
                 (%if $1
                      (%while (bar $2)
                        (%begin $1 23 $3))
                      $3)
                 $2)
               (flatten-statements!
                (lift-symbols
                 (macroexpand-all
                  '(begin
                    (if (symbol "a")
                        (while (bar (symbol "b"))
                          (symbol "a")
                          23
                          (symbol "c"))
                        (symbol "c"))
                    (symbol "b"))
                  module)
                 module))))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-defines: simple"
               `(%begin
                 (%define x)
                 (%begin
                  #f
                  (%set x 1)))
               (lift-defines
                (macroexpand-all
                 '(define x 1)
                 module)
                module)))

(bind ((module (make-core-environment)))
  (check-equal "lift-defines: nested"
               `(%begin
                 (%define x)
                 (%if (foo 1)
                      (%begin
                       #f
                       (%set x 1))
                      #f))
               (lift-defines
                (macroexpand-all
                 '(when (foo 1)
                    (define x 1))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-defines: multiple"
               `(%begin
                 (%define x)
                 (%if (foo 1)
                      (%begin
                       #f
                       (%set x 1))
                      (%begin
                       #f
                       (%set x 2))))
               (lift-defines
                (macroexpand-all
                 '(if (foo 1)
                      (define x 1)
                      (define x 2))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of prior definition"
               `(%begin
                 (%begin
                  (%define foo)
                  (%begin
                   (%define bar)
                   (%begin
                    (%bind (bar 42)
                      (%begin
                       #f
                       (%set foo (%infix "+" 23 bar))))
                    (%begin
                     #f
                     (%set bar foo))
                    bar
                    foo))))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   '(begin
                     (bind ((bar 42))
                       (define foo (%infix "+" 23 bar)))
                     (define bar foo)
                     bar
                     foo)
                   module)
                  module)
                 module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of future definition"
               `(%begin
                 (%begin
                  (%define foo)
                  (%begin
                   (%define bar)
                   (%begin
                    (%begin
                     #f
                     (%set foo (%method $1 () (bar))))
                    (%begin
                     #f
                     (%set bar (%method $2 () 1)))
                    (foo)))))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   '(begin
                     (define foo
                       (method ()
                         (bar)))
                     (define bar
                       (method ()
                         1))
                     (foo))
                   module)
                  module)
                 module)))



;;

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of undefined identifier"
               `(%begin
                 (%define bar2)
                 (%begin
                  (%define foo2)
                  (%begin
                   #f
                   (%set foo2 (%method $1 ()
                                  (bar2))))))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   '(define foo2
                      (method ()
                        (bar2)))
                   module)
                  module)
                 module)))

;;

(compile-expression
 '((bind ((x (method (y)
               (next-method 3)
               (+ 1 y))))
     (if (symbol "a")
         (while (bar (symbol "b"))
           (symbol "a")
           (x 2)
           (make-object "a" 1 "null" 2)
           (symbol "c"))
           (symbol "c"))
     (symbol "b")))
 *environment*)

(compile-expression
 '((. node
      ("removeClass" "off")
      ("addClass" "on")
      (end)))
 *environment*)

(compile-expression
 '((. 23 ("valueOf")))
 *environment*)

(compile-expression
 '((what foo: 42 about: #rest foo: 2))
 *environment*)

(compile-expression
 '((define foo #f)
   (when (not foo)
     (unless foo
       (bind ((not (method (x) x)))
         (unless foo
           #t)))))
 *environment*)