
(define-module format
  import: (core)
  export: (<stream>
           <string-stream>
           *standard-out*
           write
           read-char
           peek-char
           advance
           at-end?
           contents
           remaining-contents))

;; <stream>

(define-protocol <stream>
  (at-end?)
  (peek-char)
  (read-char)
  (write)
  (advance)
  (contents))

;; <string-stream>

(define-type <string-stream>
  (string "")
  (index 0))

(define-function at-end? ((stream <string-stream>))
  (js:>= (js:get-property stream "index")
         (js:- (size (js:get-property stream "string")) 1)))

(define-function peek-char ((stream <string-stream>))
  (js:get-property stream "string"
                   (js:get-property stream "index")))

(define-function read-char ((stream <string-stream>))
  (js:var char (peek-char stream))
  (inc! (js:get-property stream "index"))
  char)

(define-function write ((stream <string-stream>) object)
  (bind ((string (as-string object))
         (position (js:get-property stream "index"))
         (contents (js:get-property stream "string"))
         (length (size string)))
    (set! (js:get-property stream "string")
          (replace-subsequence contents string
                               start: position
                               end: (+ position length)))
    (advance stream count: length)))

(define-function advance ((stream <string-stream>) #key (count 1))
  (inc! (js:get-property stream "index") count))

(define-function contents ((stream <string-stream>))
  (js:get-property stream "string"))

(define-function remaining-contents ((stream <string-stream>))
  ((js:get-property stream "string" "substring")
   (js:get-property stream "index")))

;; <file-stream>

(define-type <file-stream>
    file)

(define-function write ((stream <file-stream>) object)
  ((js:get-property (js:get-property stream "file") "write")
   object))

;; <document-stream>

(define-type <document-stream>)

(define-function write ((stream <document-stream>) object)
  ((js:get-property "document" "write")
   object))

(define *standard-out* (select *environment* ==
                         (("commonjs")
                          (make <file-stream>
                                file: (js:get-property (require "system")
                                                       "stdout")))
                         (("browser")
                          (make <document-stream>))))