
(define-module format
  import: (core system)
  export: (<stream>
	   <string-stream>
	   *standard-out*
	   write
	   read))

;; <stream>

(define-protocol <stream>
  (at-end?)
  (peek)
  (read)
  (write)
  (contents))

;; <string-stream>

(define-type <string-stream>
  (string "")
  (index 0))

(define-function at-end? ((stream <string-stream>))
  (>= (get stream "index")
      (dec (size (get stream "string")))))

(define-function peek ((stream <string-stream>))
  (get stream "string"
       (get stream "index")))

(define-function read ((stream <string-stream>))
  (bind ((char (get (get stream "string")
		    (get stream "index"))))
	(inc! (get stream "index"))
	char))

(define-function write ((stream <string-stream>) object)
  (bind ((string (as-string object))
	 (position (get stream "index"))
	 (contents (get stream "string"))
	 (length (size string)))
    (set! (get stream "string")
	  (replace-subsequence contents string
			       start: position
			       end: (+ position length)))
    (inc! (get stream "index")
	  length)))

(define-function contents ((stream <string-stream>))
  (get stream "string"))

;; <file-stream>

(define-type <file-stream>
    file)

(define-function write ((stream <file-stream>) object)
  ((js:get-property (js:get-property stream "file") "write")
   object))

;; <document-stream>

(define-type <document-stream>)

(define-function write ((stream <document-stream>) object)
  ((js:get-property "document" "write")
   object))

(define *standard-out* (select *environment* ==
		         (("commonjs")
			  (make <file-stream>
				file: stdout))
			 (("browser")
			  (make <document-stream>))))




