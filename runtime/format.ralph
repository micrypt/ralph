
;; format

(define-function format-out ((control-string <string>) #rest args)
  "Formats arguments to *standard-output*."
  (apply format *standard-output* control-string args))

(define-function format-to-string ((control-string <string>) #rest args)
  "Process a format string and return the result as another string.
This function effectively calls format and returns the result as a string."
  (bind ((stream (make <string-stream>)))
    (apply format stream control-string args)
    (stream-contents stream)))

(define-function format ((stream <stream>) (control-string <string>) #rest args)
  "Format a string and write it to a stream."
  (bind-methods ((dispatch (char)
		   (select char ==
		     (("s" "S" "c" "C") (print-message arg stream))
		     (("=") (print arg stream))
		     (("b" "B") (format-integer arg 2 stream))
		     (("o" "O") (format-integer arg 8 stream))
		     (("d" "D") (format-integer arg 10 stream))
		     (("x" "X") (format-integer arg 16 stream))
		     (("m" "M") (arg stream))
		     (("%") (write-element stream "%"))
		     ;; TODO: make condition
		     (else: (error "Unknown format dispatch character, %c" char)))))
    (reduce (method (skip? char)
	      (if (and (not skip?)
		       (= char "%"))
		  (begin
		   (dispatch char)
		   #t)
		  (begin
		   (write-element stream char)
		   #f)))
	    #f control-string)))

;; print

(define-function print-message (object stream)
  (write stream object))