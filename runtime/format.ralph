
(define-module format
  import: (core stream)
  export: (format-out
	   format-to-string
	   format))

(define-function format-integer ((number <number>))
  ;; TODO:
  (js:+ "" number))

(define-function format-out ((control-string <string>) #rest args)
  "Formats arguments to *standard-output*."
  (apply format *standard-out* control-string args))

(define-function format-to-string ((control-string <string>) #rest args)
  "Process a format string and return the result as another string.
This function effectively calls format and returns the result as a string."
  (bind ((stream (make <string-stream>)))
    (apply format stream control-string args)
    (contents stream)))

(define-function format ((stream <stream>) (control-string <string>) #rest args)
  "Format a string and write it to a stream."
  (bind-methods ((dispatch (char arg)
		   (select char ==
		     (("s" "S" "c" "C")
		      arg)
		     (("=")
		      (or (description arg) ""))
		     (("b" "B")
		      (format-integer arg 2))
		     (("o" "O")
		      (format-integer arg 8))
		     (("d" "D")
		      (format-integer arg 10))
		     (("x" "X")
		      (format-integer arg 16))
		     (("m" "M")
		      (arg stream)
		      "")
		     ;; TODO: make condition
		     (else: (error "Unknown format dispatch character, %c" char)))))
    (bind ((index 0))
      (while (not (empty? control-string))
        (bind ((next-dispatch (string-position control-string "%")))
          (if (> next-dispatch 0)
	      ;; write part upto next dispatch
	      (begin
	       (write stream (copy-sequence control-string
					    end: next-dispatch))
	       (set! control-string
		     (copy-sequence control-string
				    start: next-dispatch)))
	      (if next-dispatch
		  ;; dispatch
		  (bind ((arg (get args index))
			 (char (second control-string))
			 (percent (= char "%")))
		    (write stream (if percent "%" (dispatch char arg)))
		    (set! control-string
			  (copy-sequence control-string
					 start: 2))
		    (unless percent
		      (inc! index)))
		  (begin
		   (write stream control-string)
		   (set! control-string "")))))))))