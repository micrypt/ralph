(define-module tests
  import: (core test stream))

;; true?
(check-false "true?: null isn't true"
	     (true? js:null))
(check-false "true?: undefined isn't true"
	     (true? js:undefined))
(check-true "true?: 0 is true"
	    (true? 0))
(check-true "true?: \"0\" is true"
	    (true? "0"))
(check-true "true?: \"\" is true"
	    (true? ""))

;; equality
(check-false "equality: 0 not false"
	     (= 0 #f))
(check-true "equality: 1 and 1 are equal"
	    (= 1 1 1))
(check-false "equality: 1 and 2 are unequal"
	     (= 1 2 1))
(check-false "equality: #f and 0 are unequal"
	     (= #f #f 0))

;; or
(check-equal "or: \"\" is true"
	     "" (or "" 1))
(check-equal "or: \"0\" is true"
	     "0" (or "0" 1))
(check-equal "or: 0 is true"
	     0 (or 0 1))

;; and
(check-false "and: #f is false"
	     (and #f 1))
(check-equal "and: \"\" is true"
	     1 (and "" 1))
(check-equal "and: \"\" is true"
	     1 (and "0" 1))
(check-equal "and: \"\" is true"
	     "" (and #t ""))
(check-equal "and: \"0\" is true"
	     "0" (and #t "0"))
(check-equal "and: 0 is true"
	     0 (and #t 0))
(check-false "and: #f is false"
	     (and #t #f))
(check-true "and: #t is true"
	     (and #t #t))

;; when
(check-true "when: and of \"\", \"0\" and 0 is true"
	    (when (and "" "0" 0)
	      #t))

;; rest
(check-equal "#rest: #1"
	     1 (+ 1))
(check-equal "#rest: #2"
	     3 (+ 1 2))
(check-equal "#rest: #3"
	     10 (+ 1 2 3 4))

;; kewords
(check-equal "keywords: equality"
	     test: test:)
(define-function foobar (#key (test 2))
  test)
(check-equal "keyword arguments: default value"
	     2 (foobar))
(check-equal "keyword arguments: passed value"
	     3 (foobar test: 3))

;; bind
(check-equal "bind: nested"
	     2 (bind ((x 0)
		      (y (+ x 1)))
	         (bind ((y (+ y 1)))
		   y)))

;; %parallel-set
(bind ((i 0)
       (v 0))
  (%parallel-set
   i 1
   v (inc i))
  (check-equal "%parallel-set: i = 0 set to 1"
	       1 i)
  (check-equal "%parallel-set: v = 0 set to incremented i still 1"
	       1 v))

;; block
(check-true "block: without non-local-exit function"
	    (block () #t))
(check-true "block: with non-local-exit function"
	    (block (return)
	      (return #t)
	      #f))
(check-equal "block: invoke non-local-exit function with value"
	     2 (block (foo)
	         1
		 (foo 2)
		 3))

;; TODO: not working
(check-condition "signal <error>" <error>
		 (method ()
		   (signal (make <error> message: "!"))
		   #f))


(check-true "binary<: 0 < 1"
	    (binary< 0 1))
(check-true "<: 1 < 2 < 3 < 4"
	    (< 1 2 3 4))
(check-false "<: 2 > 1"
	     (< 2 1 3 4))
(check-false "<: 3 > 2"
	     (< 3 2 1 4))
(check-false "<: 4 > 3"
	     (< 4 3 2 1))
(check-true ">: 1 > 0"
	    (> 1 0))
(check-false ">: 1 = 1"
	     (> 1 1))
(check-false ">: 2 < 3"
	     (> 2 3 4))
(check-true ">: 4 > 3"
	    (> 4 3 2))
(check-true "<=: 1 <= 1"
	    (<= 1 1))
(check-true "<=: 1 <= 2"
	    (<= 1 2))
(check-false "<=: 2 > 1"
	     (<= 2 1))

;; reduce
(check-equal "reduce: + on 1, 2, 3, 4, 5"
	     15 (reduce1 + (make-array 1 2 3 4 5)))
(check-equal "reduce1: + with 1 on 2, 3, 4, 5"
	     15 (reduce + 1 (make-array 2 3 4 5)))

;; apply
(check-equal "apply: + with 1 and 2, 3, 4, 5"
	     15 (apply + 1 (make-array 2 3 4 5)))
(check-equal "apply: + with 1, 2, 3 and 4, 5"
	     15 (apply + 1 2 3 (make-array 4 5)))

;; complement
(check-true "complement: binary<"
	    ((complement binary<) 1 0))
(check-false "complement: and"
	     ((complement (method (a b)
			    (and a b)))
	     #t #t))

;; for
(check-equal "for: increment until i = 0 > 10"
	     11 (for ((i 0 (inc i)))
		     ((> i 10) i)))
(check-equal "for: 10!"
	     3628800 (for ((i 10 (dec i))
			   (v 1 (* v i)))
			  ((<= i 0) v)))


;; element
(check-equal "element: 1st element is 1"
	     1 (element (make-array 1 2 3) 0))
(check-equal "element: 2nd element is 2"
	     2 (element (make-array 1 2 3) 1))

;; but-last
(check-equal "but-last: second last element of 1, 2, 3 is 2"
	     2 (last (but-last (make-array 1 2 3))))
(check-equal "but-last: third last element of 1, 2, 3, 4 is 2"
	     2 (last (but-last (make-array 1 2 3 4) n: 2)))


;; instance?
(check-true "instance?: mapped type: \"test\" is a String"
	    (instance? "test" (js:identifier "String")))
(check-true "instance?: mapped type: 1 is a Number"
	    (instance? 1 (js:identifier "Number")))
(check-true "instance?: \"test\" is a <string>"
	    (instance? "test" <string>))
(check-true "instance?: 1 is a <number>"
	    (instance? 1 <number>))

;; setter definition before getter

(define-function (setter foo) (object new-value)
  (set! (js:get-property object "foo") new-value))

(define-function foo (object)
  (js:get-property object "foo"))

(bind ((bar (make <object>)))
  (set! (foo bar) 1)
  (check-equal "function: setter before getter"
	       1 (foo bar)))

;; any? and rcurry
(check-equal "rcurry: (element x 1) on 0, 1, 2"
	     1 ((rcurry element 1)
		(make-array 0 1 2)))
(check-true "any? and rcurry: x > 2 on 1, 2, 3, 4"
	    (any? (rcurry > 2)
		  (make-array 1 2 3 4)))

;; scope
(bind ((elements (make-array 0 1 2 3 4 5 6 7 8 9))
       (fns (make-array)))
  (for ((i 0 (+ i 1)))
       ((>= i (size elements)))
    (bind ((el (element elements i)))
      (push-last fns (method ()
			el))))
  (check-equal "scope: bind in for loop builds closures"
	       2 ((element fns 2))))

(check-equal "dotimes: push 0..9 into array"
	     9 (last (bind ((numbers (make <array>)))
		       (dotimes (i 10 numbers)
			 (push-last numbers i)))))

;; find-key
(bind ((array (make-array 0 0 0 1 0 0 1 0 0)))
  (check-equal "find-key: from start: first element > 0"
	       3 (find-key array
			   (rcurry > 0)))
  (check-equal "find-key: from start: second element > 0"
	     6 (find-key array
			 (rcurry > 0)
			 skip: 1))
  (check-false "find-key: from start: no third element > 0"
	       (find-key array
			 (rcurry > 0)
			 skip: 2));
  (check-equal "find-key: from end: first element > 0"
	       6 (find-key array
			   (rcurry > 0)
			   from-end: #t))
  (check-equal "find-key: from end: second element > 0"
	       3 (find-key array
			   (rcurry > 0)
			   from-end: #t
			   skip: 1))
  (check-false "find-ley: from end: no third element > 0"
	       (find-key array
			 (rcurry > 0)
			 from-end: #t
			 skip: 2)))

;; test every?
;; (bind ((table (make <table>))
;;        (list (make <list> size: 2)))
;;   (set! (element table "0") #t)
;;   (set! (element table "1") #t)
;;   (check-true (format-to-string "every? true? on table %="
;; 				table)
;; 	      (every? true? table))
;;   (set! (element table "0") #f)
;;     (set! (element table "1") #f)
;;     (check-true (format-to-string "every? false? on table %="
;; 				  table)
;; 		(every? false? table))
;;     (set! (element table "0") #t)
;;     (check-false (format-to-string "every? false? on table %="
;; 				   table)
;; 		 (every? false? table))
;;     (set! (element list 0) #t)
;;     (set! (element list 1) #t)
;;     (check-true (format-to-string "every? true? on list %="
;; 				  list)
;; 		(every? true? list))
;;     (set! (element list 0) #f)
;;     (set! (element list 1) #f)
;;     (check-true (format-to-string "every? false? on list %="
;; 				  list)
;; 		(every? false? list))
;;     (set! (element list 0) #t)
;;     (check-false (format-to-string "every? false? on list %="
;; 				   list)
;; 		 (every? false? list)))
;;
;; test any?
;; (bind ((table (make <table>))
;;        (list (make <list> size: 2)))
;;   (set! (element table "0") #t)
;;   (set! (element table "1") #t)
;;   (check-true (format-to-string "any? true? on table %="
;; 				table)
;; 	      (any? true? table))
;;   (set! (element table "0") #f)
;;   (set! (element table "1") #f)
;;   (check-true (format-to-string "any? false? on table %="
;; 				table)
;; 	      (any? false? table))
;;   (set! (element table "0") #t)
;;     (check-true (format-to-string "any? true? on table %="
;; 				  table)
;; 		(any? true? table))
;;     (check-true (format-to-string "any? false? on table %="
;; 				  table)
;; 		(any? false? table))
;;     (set! (element list 0) #t)
;;     (set! (element list 1) #t)
;;     (check-true (format-to-string "any? true? on list %="
;; 				  list)
;; 		(any? true? list))
;;     (set! (element list 0) #f)
;;     (set! (element list 1) #f)
;;     (check-true (format-to-string "any? false? on list %="
;; 				  list)
;; 		(any? false? list))
;;     (set! (element list 0) #t)
;;     (check-true (format-to-string "any? true? on list %="
;; 				  list)
;; 		(any? true? list))
;;     (check-true (format-to-string "any? false? on list %="
;; 				  list)
;; 		(any? false? list)))

;; bind-methods
(bind-methods ((test1 (a)
	         (+ a 1))
	       (test2 (b)
		 (+ b 2)))
  (check-equal "bind-methods: 1"
	       2 (test1 1))
  (check-equal "bind-methods: 2"
	       3 (test2 1)))

;; get
(bind ((x (make <object>)))
  (set! (get x "1" "2" "3") 4)
  (check-equal "get: '1' -> '2' -> '3' = 4"
	       4 (get x "1" "2" "3")))

;; if-bind
(check-true "if-bind: test is true, shouldn't be visible in then"
	    (if-bind (a #t)
	      a
	      (handler-case
		  (begin
		   a
		   #f)
		((<error> condition: condition)
		    #f))))

(check-true "if-bind: test is false, shouldn't be visible in then"
	    (if-bind (a #f)
		     a
		     (handler-case
			 (begin
			  a
			  #f)
		       ((<error> condition: condition)
			   #t))))

(define-protocol <test-protocol>
  (test))

(define-function test ((string <string>))
  1)

(define-function test ((number <number>))
  2)

(define-function (setter test) ((object <object>) new-value)
  4)

(define-function test ((object <object>))
  3)

(check-equal "protocol: specialized on <string>"
	     1 (test "test"))
(check-equal "protocol: specialized on <number>"
	     2 (test 1))
(bind ((x (make <object>)))
  (check-equal "protocol: setter before getter, get"
	       3 (test x))
  (check-equal "protocol: setter before getter, set"
	       4 (set! (test x) 0)))

;; inc!
(bind ((x (make <object>)))
  (set! (get x "y") 0)
  (inc! (get x "y"))
  (check-equal "inc!: 0 -> 1"
	       1 (get x "y")))

;; default initializer
(define-type <test>
  foo
  bar)

(bind ((test (make <test> foo: 1 bar: 2)))
  (check-equal "type: default initializer for slot 1"
	       1 (get test "foo"))
  (check-equal "type: default initializer for slot 2"
	       2 (get test "bar")))

;; <string-stream>
(bind ((stream (make <string-stream> string: "test")))
  (check-false "<string-stream>: not at end when starting"
	       (at-end? stream))
  (check-true "<string-stream>: peeking doesn't advance the stream"
	      (and (== "t" (peek stream))
		   (== "t" (peek stream))))
  (check-true "<string-stream>: reading advances the stream"
	      (and (== "t" (read stream))
		   (== "e" (read stream))))
  (read stream)
  (read stream)
  (check-true "<string-stream>: at end when done"
	      (at-end? stream)))
(bind ((stream (make <string-stream>)))
  (check-equal "<string-stream>: empty contents when starting"
	       "" (contents stream))
  (write stream "FOO")
  (check-equal "<string-stream>: simple write"
	       "FOO" (contents stream))
  (check-true "<string-stream>: writing advances, always at end"
	      (at-end? stream))
  (write stream "BAR")
  (check-equal "<string-stream>: another write, check contents"
	       "FOOBAR" (contents stream)))

;; format
(check-equal "format-to-string: numbers and escaping"
	     "1%2" (format-to-string "%d%%%d" 1 2))
(check-equal "format-to-string: method"
	     "x%test%x" (format-to-string "x%mx"
			  (method (stream)
				  (write stream "%test%"))))
(check-equal "format-to-string: description of <string>"
	     "\"TEST\"" (format-to-string "%=" "TEST"))