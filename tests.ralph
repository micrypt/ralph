
(define-function test-< ()
  (check-true "(< 1 2 3 4)" (< 1 2 3 4))
  (check-false "(< 2 1 3 4)" (< 2 1 3 4))
  (check-false "(< 3 2 1 4)" (< 3 2 1 4))
  (check-false "(< 4 3 2 1)" (< 4 3 2 1)))

(define-function test-= ()
  (check-true "0 != #f" (= 0 #f))
  (check-false "(false? 0)" (false? 0))
  (check-true "1, 1, 1" (= 1 1 1))
  (check-false "1, 2, 1" (= 1 2 1))
  (check-false "#f, #f, 0" (= #f #f 0)))

(define-function test-reduce ()
  (check-equal "" (reduce1 + [1 2 3 4 5]) 15)
  (check-equal "" (reduce + 1 [2 3 4 5]) 15))

(define-function test-apply ()
  (check-equal "" (apply + 1 [2 3 4 5]) 15)
  (check-equal "" (apply + 1 2 3 [4 5]) 15))

(define-function test-format-to-string ()
  (check-equal "" (format-to-string "%d%%%d" 1 2) "1%2")
  (check-equal "" (format-to-string "x%mx"
				    (method (stream)
				      (write stream "%test%")))
	       "x%test%x"))

(define-function foo ()
  (bind ((a1 (bar))
	 (b1 b2 (bar))
	 (c1 c2 c3 (bar))
	 (d1 d2 d3 d4 (bar))
	 (#rest e1 (bar))
	 (f1 #rest f2 (bar))
	 (g1 g2 #rest g3 (bar))
 	 (h1 (baz))
 	 (i1 i2 (baz))
 	 (j1 #rest j2 (baz))
 	 (#rest k1 (baz)))
    (list a1
	  b1 b2
	  c1 c2 c3
	  d1 d2 d3 d4
	  e1
	  f1 f2
	  g1 g2 g3
	  h1
	  i1 i2
	  j1 j2
	  k1)))

(define-function bar ()
  (values 1 2 3))

(define-function baz ()
  1)

(define-function test-bind ()
  (check-equal "" (foo)
	       (list 1
		     1 2
		     1 2 3
		     1 2 3 #f
		     (list 1 2 3)
		     1 (list 2 3)
		     1 2 (list 3)
		     1
		     1 #f
		     1 (list)
		     (list 1))))

(define-function test-every? ()
  (bind ((table (make <table>))
	 (list (make <list> size: 2)))
    (set! (element table "0") #t)
    (set! (element table "1") #t)
    (check-true (format-to-string "every? true? on table %="
				  table)
		(every? true? table))
    (set! (element table "0") #f)
    (set! (element table "1") #f)
    (check-true (format-to-string "every? false? on table %="
				  table)
		(every? false? table))
    (set! (element table "0") #t)
    (check-false (format-to-string "every? false? on table %="
				   table)
		 (every? false? table))
    (set! (element list 0) #t)
    (set! (element list 1) #t)
    (check-true (format-to-string "every? true? on list %="
				  list)
		(every? true? list))
    (set! (element list 0) #f)
    (set! (element list 1) #f)
    (check-true (format-to-string "every? false? on list %="
				  list)
		(every? false? list))
    (set! (element list 0) #t)
    (check-false (format-to-string "every? false? on list %="
				   list)
		 (every? false? list))))

(define-function test-any? ()
  (bind ((table (make <table>))
	 (list (make <list> size: 2)))
    (set! (element table "0") #t)
    (set! (element table "1") #t)
    (check-true (format-to-string "any? true? on table %="
				  table)
		(any? true? table))
    (set! (element table "0") #f)
    (set! (element table "1") #f)
    (check-true (format-to-string "any? false? on table %="
				  table)
		(any? false? table))
    (set! (element table "0") #t)
    (check-true (format-to-string "any? true? on table %="
				   table)
		(any? true? table))
    (check-true (format-to-string "any? false? on table %="
				   table)
		(any? false? table))
    (set! (element list 0) #t)
    (set! (element list 1) #t)
    (check-true (format-to-string "any? true? on list %="
				  list)
		(any? true? list))
    (set! (element list 0) #f)
    (set! (element list 1) #f)
    (check-true (format-to-string "any? false? on list %="
				  list)
		(any? false? list))
    (set! (element list 0) #t)
    (check-true (format-to-string "any? true? on list %="
				   list)
		(any? true? list))
    (check-true (format-to-string "any? false? on list %="
				   list)
		(any? false? list)))

(define-function test-return ()
  (bind-methods ((foo ()
		   (bind ((a 1))
		     (return a))
		   2))
    (check-equal "Return in bind" (foo) 1)))

;; run tests
(do apply (list test-<
		test-=
		test-apply
		test-reduce
		test-bind
		test-every?
		test-any?
		test-return
		test-format-to-string))