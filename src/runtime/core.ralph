
(define-module runtime/core
  export: (%define %export %get-definition %define-getter %define-setter
           (js:inline "_s") (js:inline "_k")
           (js:inline "_key") (js:inline "_rest")
           keyword keyword? symbol symbol-name
           <object> <string> <number> <boolean> <array> <function>
           <symbol> <hash-symbol> <keyword> <non-local-exit> <error>
           not true? signal
           *environment*
           %define-class %make-generic %next-method
           %alias-type %actual-type
           %non-local-exit? %make-non-local-exit-function
           %get-property get %set
           %inherit make initialize type instance? superclass
           as-string as-array as-number
           make-string make-number make-boolean
           apply reduce reduce1 map do repeatedly
           any? every? member? choose-by find-key
           complement curry rcurry
           position last-position join trim replace
           as-lowercase as-uppercase
           make-array make-object
           element first second third last rest concatenate
           size empty? but-last copy-sequence slice
           replace-subsequence replace-subsequence!
           reverse reverse! sort sort! remove remove!
           push push-last pop pop-last
           keys values
           = == > < >= <=
           binary= binary< binary> binary<= binary>=
           + - * /
           inc dec
           description
           identity
           min max abs round floor expt sqrt cos sin atan2 as-radiant
           mod even? odd?
           extend! as-property-list as-object
           starts-with?))

;;;; define

(js:function %export (exports name value)
  (set! (js:get-property exports name) value))

(js:function %define (module exports name value)
  (begin
    (set! (js:get-property module name) value)
    (js:if (js:>= ((js:get-property module "%exports" "indexOf") name) 0)
           (%export exports name value)
           #f)))


;; manual definition
(%define *module* exports (js:escape %define) %define)
(%define *module* exports (js:escape %export) %export)

(define %get-property
  (js:function js:null (object name)
    (js:return (js:and object
                       (has? object name)
                       (js:get-property object name)))))

(define %get-definition
  (js:function js:null (module name)
    (js:return (js:and (js:defined (js:get-property module name))
                       (js:get-property module name)))))

(define %make-function
  (js:function js:null (name function)
    (js:return (js:new (js:inline "Function")))))

;;;; boolean primitives

(define true?
  (js:function js:null (value)
    (js:return
     (js:and (js:not (js:=== value js:null))
             (js:not (js:=== value js:undefined))
             (js:not (js:=== ((js:get-property value "valueOf"))
                             #f))))))


(set! (js:get-property true? "displayName")
      "(true? <object>)")

(define not
  (js:function js:null (value)
    (js:return (js:not (true? value)))))

(set! (js:get-property not "displayName")
      "(not <object>)")


;; class

(define %define-class
  (js:function js:null (module exports name superclass slots)
    (begin
     (js:var class (js:function js:null ()))
     (%define module exports name class)
     (set! (js:get-property class "%name")
           name)
     (set! (js:get-property class "%slots")
           slots)
     (js:if superclass
            (begin
             (%inherit class superclass)
             (set! (js:get-property slots "__proto__")
                   (js:get-property superclass "%slots"))))
     (js:return class))))

;;;; getter

(define %define-getter
  (js:function js:null (module exports name function type display-name)
    (bind ((getter (%get-definition module name))
           (generic? (when getter
                       (%get-property getter "%generic")))
           ;; define new getter and return (possibly) existing setter
           (setter (if generic?
                       (bind ((type (%actual-type type))
                              (prototype (js:get-property type "prototype"))
                              (existing-getter (%get-property prototype name)))
                         (set! (js:get-property prototype name) function)
                         (set! (js:get-property function "%type") type)
                         (%get-property existing-getter "%setter"))
                       (begin
                        (%define module exports name function)
                        (%get-property getter "%setter")))))
      (set! (js:get-property function "%name") name)
      (set! (js:get-property function "displayName") display-name)
      ;; re-define setter if it was existing
      (when setter
        (set! (js:get-property function "%setter") setter)))))

(define-function %search-setter (prototype name)
  (js:var setter)
  (js:while (and prototype (not setter))
    ;; find next getter
    (js:var getter (js:get-property prototype name))
    (set! setter (%get-property getter "%setter"))
    (set! prototype (js:get-property prototype "__proto__")))
  setter)

(define-function %next-method (function)
  (js:var name (js:get-property function "%name"))
  (js:var proto (js:get-property function "%type"
                                 "prototype" "__proto__"))
  (js:if (not (js:get-property function "%setter?"))
         (js:return (js:get-property proto name)))
  (%search-setter proto name))

(define %define-setter
  (js:function js:null (module exports name function type display-name)
    (bind ((getter (%get-definition module name))
           (generic? (when getter
                       (%get-property getter "%generic"))))
      (set! (js:get-property function "%name") name)
      (set! (js:get-property function "displayName") display-name)
      (set! (js:get-property function "%setter?") #t)
      (if generic?
          (bind ((type (%actual-type type))
                 (prototype (js:get-property type "prototype"))
                 (getter (or (%get-property prototype name)
                             ;; create temporary getter
                             (bind ((temp (%make-function)))
                               (set! (js:get-property prototype name)
                                     temp)
                               temp))))
            (set! (js:get-property function "%type") type)
            (set! (js:get-property getter "%setter") function))
          (begin
           (unless (%get-definition module name)
             ;; creare temporary getter
             (%define module exports name (%make-function)))
           (set! (js:get-property (%get-definition module name) "%setter")
                 function))))))

(define-function %set (function #rest arguments)
  (js:var generic? (%get-property function "%generic"))
  (js:var name (%get-property function "%name"))
  (js:if (js:not generic?)
         (js:return (apply (%get-property function "%setter")
                           arguments)))
  ;; generic
  (js:var actual-type (%actual-type (type (first arguments))))
  (js:var prototype (js:get-property actual-type "prototype"))
  (js:var setter (%search-setter prototype name))
  (apply setter arguments))

;;;; objects

(define-function make (type #rest arguments)
  (js:var type (%actual-type type))
  (js:var object (js:new type))
  (apply initialize object arguments)
  object)

(define-function %inherit (class superclass)
  (set! (js:get-property class "prototype" "__proto__")
        (js:get-property superclass "prototype"))
  (set! (js:get-property class "prototype" "__super__")
        superclass)
  class)

(define-function superclass (class)
  (js:get-property class "prototype" "__super__"))

(define %actual-type
  (js:function js:null (type)
    (js:return (js:or (%get-property type "%js-type") type))))

;;;; keywords

(define %keywords (make-object))

(define <keyword> (%make-function))

(define-function keyword? (keyword)
  (instance? keyword <keyword>))

(%define *module* exports "_k"
  (js:function js:null (name)
    (begin
      (js:var keyword js:null)
      (js:set name ((js:get-property name "toLowerCase")
                    name))
      (js:return
       (if (has? %keywords name)
           (js:get-property %keywords name)
           (begin
            (set! keyword (js:new <keyword>))
            (set! (js:get-property keyword "name") name)
            (set! (js:get-property %keywords name) keyword)
            keyword))))))

(define keyword (js:inline "_k"))

;;;; non-local exit

(define <non-local-exit>
  (js:function js:null (name value)
    (begin
     (set! (js:get-property js:this "name") name)
     (set! (js:get-property js:this "value") value)
     (js:return js:this))))

(define-function %non-local-exit? (condition)
  (instance? condition <non-local-exit>))

;; TODO: replace with proper initialization method
(define-function %make-non-local-exit-function (name)
  (method (value)
    ;; TODO: use signal and proper make call
    (js:throw (js:new <non-local-exit>
                      name value))))

(define-function as-string (object)
  ((js:get-property object "toString")))

(define-function as-number (object)
  ((js:inline "Number") object))

(define-function make-string (value)
  (js:new (js:inline "String") value))

(define-function make-number (value)
  (js:new (js:inline "Number") value))

(define-function make-boolean (value)
  (js:new (js:inline "Boolean") value))

(define-function as-array (arguments skip)
  ((js:get-property [] "slice" "call")
   arguments (js:or skip 0)))

(define-function has? (object property)
  ((js:get-property object "hasOwnProperty") property))

(define-function get (object #rest keys)
  (js:var result)
  (js:while (js:not (empty? keys))
    (js:var key (first keys))
    (if (has? object key)
        (begin
         (set! result (js:get-property object key))
         (set! object result)
         (set! keys (rest keys)))
        (js:return #f)))
  result)

(define-function (setter get) (object #rest properties/value)
  (if (js:<= (size properties/value) 2)
      (set! (js:get-property object (first properties/value))
            (second properties/value))
      (bind ((property (first properties/value))
             (object2 (if (has? object property)
                          (get object property)
                          (bind ((new (make-object)))
                            (set! (js:get-property object property) new)
                            new))))
        (apply %set get object2
               (rest properties/value)))))

;;;;

(define *environment*
  (cond
   ((js:defined window) "browser")
   ((js:defined process) "nodejs")
   (else: "commonjs")))

;;;;

(define-function symbol-name (symbol)
  (get symbol "name"))

(define-function as-object (property-list)
  (js:var list (slice property-list))
  (js:var result (make-object))
  (js:var key)
  (js:var value)
  (js:while (js:> (size list) 0)
    (set! key (pop list))
    (set! value (pop list))
    (set! (get result
               (if (instance? key <keyword>)
                   (symbol-name key)
                   (as-string key)))
          value))
  result)

;;;;

(define-class <object> ())
(define-class <string> ())
(define-class <number> ())
(define-class <array> ())
(define-class <boolean> ())
(define-class <function> ())

(define-function %alias-type (ralph-type javascript-type)
  (set! (js:get-property ralph-type "%js-type") javascript-type)
  (set! (js:get-property javascript-type "%ralph-type") ralph-type))

(%alias-type <object> (js:inline "Object"))
(%alias-type <string> (js:inline "String"))
(%alias-type <number> (js:inline "Number"))
(%alias-type <array> (js:inline "Array"))
(%alias-type <boolean> (js:inline "Boolean"))
(%alias-type <function> (js:inline "Function"))

;;;;

(define-function size ((array <array>))
  (js:get-property array "length"))

(define-function slice (array start end)
  ;; workaround for ringo: slice(undefined, undefined) -> undefined
  (js:if (js:defined end)
         ((js:get-property array "slice") start end)
         ((js:get-property array "slice") start)))

(define-function copy-sequence ((array <array>)
                                #key (start 0) (end (size array)))
  (slice array start end))

(define-function inc ((number <number>))
  (js:+ number 1))

(define-function dec ((number <number>))
  (js:- number 1))

(define-function + ((number <number>) #rest more-numbers)
  (reduce (method (number1 number2)
            (js:+ number1 number2))
          number more-numbers))

(define-function - ((number <number>) #rest more-numbers)
  (if (empty? more-numbers)
      (js:negative number)
      (reduce (method (number1 number2)
                (js:- number1 number2))
              number more-numbers)))

(define-function * ((number1 <number>) (number2 <number>)
                    #rest more-numbers)
  (reduce1 (method (number1 number2)
             (js:* number1 number2))
           (%concat [number1 number2] more-numbers)))

(define-function / ((number1 <number>) (number2 <number>)
                    #rest more-numbers)
  (reduce1 (method (number1 number2)
             (js:/ number1 number2))
           (%concat [number1 number2] more-numbers)))

(define-function keys (object)
  ;; TODO: use of Object.keys generates errors ...
  (js:var keys [])
  (if (instance? object <array>)
      (for ((i 0 (inc i)))
           ((>= i (size object)) keys)
        (push-last keys i))
      (begin
       (js:for-in (key object)
         (js:if (has? object key)
           (push-last keys key)))
       keys)))

(define-function values (object)
  (js:var values [])
  (js:for-in (key object)
    (js:if (has? object key)
      (push-last values (js:get-property object key))))
  values)

(define-function make-array (#rest elements)
  elements)

(define-function push ((array <array>) new-value)
  ((js:get-property array "unshift") new-value)
  array)

(define-function push-last ((array <array>) new-value)
  ((js:get-property array "push") new-value)
  array)

(define-function pop ((array <array>))
  ((js:get-property array "shift")))

(define-function pop-last ((array <array>))
  ((js:get-property array "pop")))

(define-function add! ((array <array>) new-value)
  (push array new-value))

(define-function %concat (array1 array2 )
  ((js:get-property array1 "concat") array2))

(define-function reverse! ((array <array>))
  ((js:get-property array "reverse")))

(define-function reverse ((array <array>))
  (reverse! (slice array)))

(define-function sort! ((array <array>) #key (test <))
  ((js:get-property array "sort") test))

(define-function sort ((array <array>) #key (test <))
  (sort! (slice array) test: test))

(define-function element ((array <array>) key #key default)
  (or (js:get-property array key) default))

(define-function (setter element) ((array <array>) key new-value)
  (set! (js:get-property array key) new-value))

(define-function empty? (sequence)
  (js:if (js:or (instance? sequence <array>)
                (== (js:typeof sequence) "string"))
         (js:=== (size sequence) 0)
         #t))

(define-function map ((function <function>) (array <array>))
  (js:var res [])
  (js:var len (js:get-property array "length"))
  (js:for (((i 0)
            (js:< i len)
            (js:+ i 1)))
          (push-last res (function (js:get-property array i))))
  res)

(define-function do ((function <function>) (array <array>))
  (js:var len (js:get-property array "length"))
  (js:for (((i 0)
            (js:< i len)
            (js:+ i 1)))
          (function (js:get-property array i)))
  #f)

(define-function reduce1 ((function <function>) (array <array>))
  ((js:get-property array "reduce")
   (method (previous current)
     (function previous current))))

(define-function reduce ((function <function>) initial-value (array <array>))
  ((js:get-property array "reduce")
   (method (previous current)
     (function previous current))
   initial-value))

(define-function every? ((function <function>) (array <array>))
  ((js:get-property array "every")
   (method (element)
     (true? (function element)))))

(define-function choose ((function <function>) (array <array>))
  ((js:get-property array "filter")
   (method (element)
     (true? (function element)))))

(define %not-found (make-object))

(define-function find-key ((array <array>) (predicate <function>)
                           #key (skip 0) failure from-end?)
  (bind ((keys (keys array))
         (satisfying-keys
          (choose (method (index)
                    (true? (predicate (element array index))))
                  (if from-end?
                      (reverse keys)
                      keys))))
    (or (element satisfying-keys skip)
        failure)))

;; <array> <object> or <string> <string>
(define-function position ((array <array>) element)
  (js:var position ((js:get-property array "indexOf") element))
  (js:if (js:> position -1) position #f))

(define-function last-position ((array <array>) element)
  (js:var position ((js:get-property array "lastIndexOf") element))
  (js:if (js:> position -1) position #f))

(define-function any? ((function <function>) (array <array>))
  (js:var match #f)
  (js:var found?
          ((js:get-property array "some")
           (method (element)
             (js:var result (function element))
             (set! match result)
             result)))
  (js:if found? match #f))

(define-function member? (value (array <array>) #key (test ==))
  (any? (method (other-value)
          (test value other-value))
        array))

(define-function choose-by ((predicate <function>)
                            (test-array <array>)
                            (value-array <array>))
  (bind ((test-keys (choose (method (test-key)
                              (predicate (element test-array test-key)))
                            (keys test-array))))
    (map (curry element value-array)
         test-array)))

(define-function first ((array <array>))
  (js:var item (js:get-property array 0))
  (js:if (true? item) item #f))

(define-function second ((array <array>))
  (js:var item (js:get-property array 1))
  (js:if (true? item) item #f))

(define-function third ((array <array>))
  (js:var item (js:get-property array 2))
  (js:if (true? item) item #f))

(define-function last ((array <array>))
  (js:var item (js:get-property array (js:- (size array) 1)))
  (js:if (true? item) item #f))

(define-function rest ((array <array>))
  (slice array 1))

(define-function but-last ((array <array>) n)
  (slice array 0 (js:* (js:or n 1) -1)))

(define-function replace-subsequence ((target-array <array>) (insert-array <array>)
                                      #key (start 0) (end (size target-array)))
  (concatenate (slice target-array 0 start)
               insert-array
               (slice target-array end)))

(define-function replace-subsequence! ((target-array <array>) (insert-array <array>)
                                       #key (start 0) end)
  ((js:get-property [] "splice" "apply")
   target-array (%concat [start (js:- (or end start) start)]
                         insert-array))
  target-array)

;;;; string

;; * as-uppercase! and as-lowercase! impossible,
;;   as strings in JavaScript are immutable

(define-function as-uppercase ((string <string>))
  ((js:get-property string "toUpperCase")))

(define-function as-lowercase ((string <string>))
  ((js:get-property string "toLowerCase")))

;; TODO: generic interpose, interleave
(define-function join ((array <array>) (string <string>))
  ((js:get-property array "join") string))

(define-function trim ((string <string>))
  ((js:get-property string "trim")))

(define-function replace ((string <string>) pattern replacement)
  ((js:get-property string "replace")
   pattern replacement))

;;;; functional

(define-function apply ((function <function>))
  (js:var actual ((js:get-property [] "slice" "call") js:arguments 1 -1))
  (js:var last (js:get-property js:arguments (js:- (size js:arguments) 1)))
  ((js:get-property function "apply") js:null
   (js:if (== last function)
          actual
          (%concat actual last))))

(define-function curry ((function <function>) #rest curried-args)
  (method (#rest args)
    (apply function (%concat curried-args args))))

(define-function rcurry ((function <function>) #rest curried-args)
  (method (#rest args)
    (apply function (%concat args curried-args))))

(define-function always (value)
  (method (#rest args)
    value))

(define-function complement ((function <function>))
  (method (#rest arguments)
    (not (apply function arguments))))

;;;; reflection primitives

(define-function type (object)
  (js:var type)
  (js:var ralph-type)
  (js:if (js:or (js:=== object js:undefined)
                (js:=== object js:null))
      <boolean>
      ;; Object.getPrototypeOf on primitives only works in FireFox:
      ;; ((js:inline "Object.getPrototypeOf") object))
      (begin
       (set! type (js:get-property object "constructor"))
       (set! ralph-type (js:get-property type "%ralph-type"))
       (js:or ralph-type type))))

(define-function instance? (object type)
  (js:var actual)
  (if object
      (begin
       (set! actual (%actual-type type))
       (js:or
        ;; primitive
        (js:=== (js:get-property object "constructor")
                actual)
        ;; object
        ((js:get-property actual "prototype"
                          "isPrototypeOf")
         object)
        ;; mapped
        (js:and (js:get-property type "%js-type")
                (js:== (js:get-property object "constructor" "name")
                       (js:get-property actual "name")))))
      (js:or (js:=== type <boolean>)
             (js:=== type (js:inline "Boolean")))))

;; generic

(define-function %make-generic (function-name display-name)
  (js:function dispatcher (object)
    (begin
     (js:var function (js:and (js:defined object)
                              (js:get-property object function-name)))
     (js:return (js:and function
                        ((js:get-property function "apply") object js:arguments)))))
  (set! (js:get-property dispatcher "%generic") #t)
  (set! (js:get-property dispatcher "%name") function-name)
  (set! (js:get-property dispatcher "displayName") display-name)
  dispatcher)

(define-generic initialize (object #rest))

(define-function initialize ((object <object>))
  (js:var slots (js:get-property (type object) "%slots"))
  (js:var arguments (as-object (rest (as-array js:arguments))))
  (js:var value)
  (js:if slots
         (js:for-in (key slots)
           (js:if (not (has? (js:inline "Object.prototype") key))
                  (set! (js:get-property object key)
                        (js:if (has? arguments key)
                               (js:get-property arguments key)
                               (begin
                                (set! value (js:get-property slots key))
                                (js:if (js:=== value #f)
                                       value
                                       (value)))))))))

;; error

(define-class <error> ()
  message)

(%alias-type <error> (js:inline "Error"))

;;

(define-function concatenate (object #rest rest)
  (js:if (instance? object <array>)
         (reduce %concat object rest)
         (reduce (method (current next)
                   (js:+ current next))
                 object rest)))

;;

(define-generic description (object))

(define-function description ((number <number>))
  (js:+ "" number))

(define-function description ((string <string>))
  (js:var escaped ((js:get-property string "replace")
                   "\"" "\\\"" "g"))
  (js:+ "\"" escaped "\""))

(define-function description ((array <array>))
  (js:+ "(" (join (map description array) " ") ")"))

(define-function description ((value <boolean>))
  (if value "#t" "#f"))

;;

(define-function signal ((error <error>))
  (js:throw error))

;;;; comparison

(define-function == (object1 object2 #rest more-objects)
  (compare (method (object1 object2)
             (js:=== object1 object2))
           object1 object2 more-objects))

(define-function compare ((function <function>) object1 object2 more-objects)
  (js:var object object1)
  (js:var remaining (%concat [object2] more-objects))
  (js:while (js:not (empty? remaining))
    (js:var next (first remaining))
    (js:if (js:not (function object next))
      (js:return #f))
    (set! object next)
    (set! remaining (rest remaining)))
  #t)

(define-generic binary= (object1 object2))
(define-generic binary< (object1 object2))

(define-function binary= (object1 object2)
  (js:and (js:=== (type object1)
                  (type object2))
          (js:== object1 object2)))

(define-function binary< (object1 object2)
  (js:and (js:=== (type object1)
                  (type object2))
          (js:< object1 object2)))

(define-function binary= ((array1 <array>) (array2 <array>))
  (and (== (size array1)
           (size array2))
       (block (return)
         (dotimes (i (size array1))
           (unless (= (get array1 i)
                      (get array2 i))
             (return #f)))
         #t)))

(define-function = (object1 object2 #rest more-objects)
  (compare binary= object1 object2 more-objects))

(define-function < (object1 object2 #rest more-objects)
  (compare binary< object1 object2 more-objects))

(define-function binary<= (object1 object2)
  (js:or (binary< object1 object2)
         (binary= object1 object2)))

(define-function <= (object1 object2 #rest more-objects)
  (compare binary<= object1 object2 more-objects))

(define-function binary> (object1 object2)
  (js:if (js:and (true? object1)
                 (true? object2))
       (js:and (js:not (binary< object1 object2))
               (js:not (binary= object1 object2)))))

(define-function > (object1 object2 #rest more-objects)
  (compare binary> object1 object2 more-objects))

(define-function binary>= (object1 object2)
  (js:or (js:not (binary< object1 object2))
         (binary= object1 object2)))

(define-function >= (object1 object2 #rest more-objects)
  (compare binary>= object1 object2 more-objects))


(define-function make-object (#rest key-vals)
  (bind ((object (make-object)))
    (for ((i 0 (+ i 2)))
         ((>= i (size key-vals)) object)
      (set! (get object (get key-vals i))
            (get key-vals (inc i))))))

;; symbols

(define-class <hash-symbol> ()
    name)

(%define *module* exports "_key"
         (make <hash-symbol> name: "key"))

(%define *module* exports "_rest"
         (make <hash-symbol> name: "rest"))


(define-class <symbol> ()
    name)

(define %symbols (make-object))

(define-function symbol (name)
  (bind ((name (as-lowercase name)))
    (or (get %symbols name)
        (set! (get %symbols name)
              (make <symbol> name: name)))))
(%define *module* exports "_s" symbol)

(define-function description ((symbol <symbol>))
  (get symbol "name"))

(define-function description ((keyword <keyword>))
  (js:+ (symbol-name keyword) ":"))

(define-function description ((symbol <hash-symbol>))
  (js:+ "#" (symbol-name symbol)))

(define-function identity (value)
  value)

(define-function repeatedly ((function <function>) (count <integer>))
  (bind ((result []))
    (dotimes (i count result)
      (push-last result (function)))))

(define-function min (#rest numbers)
  ((js:get-property (js:inline "Math.min") "apply")
   js:null numbers))

(define-function max (#rest numbers)
  ((js:get-property (js:inline "Math.max") "apply")
  js:null numbers))

(define-function abs (number)
  ((js:inline "Math.abs") number))

(define-function round (number)
  ((js:inline "Math.round") number))

(define-function floor (number)
  ((js:inline "Math.floor") number))

(define-function sin (number)
  ((js:inline "Math.sin") number))

(define-function cos (number)
  ((js:inline "Math.cos") number))

(define-function atan2 (x y)
  ((js:inline "Math.atan2") x y))

(define-function expt (base power)
  ((js:inline "Math.pow") base power))

(define-function sqrt (number)
  ((js:inline "Math.sqrt") number))

(define-function mod (number1 number2)
  (js:% number1 number2))

(define-function as-radiant (number)
  (js:* number (js:/ (js:inline "Math.PI") 180)))

(define-function remove! ((array <array>) value)
  (js:var key (find-key array (curry = value)))
  (when key
    ((js:get-property array "splice") key 1))
  array)

(define-function remove ((array <array>) value)
  (remove! (slice array) value))

(define-function extend! ((object1 <object>) (object2 <object>))
  (for-each ((key (keys object2)))
            ()
    (set! (get object1 key)
          (get object2 key)))
  object1)

(define-function as-property-list (object #key keywords?)
  (js:var result [])
  (for-each ((key (keys object)))
            ()
    (push-last result
               (if keywords?
                   (keyword (as-string key))
                   key))
    (push-last result (get object key)))
  result)

(define-function starts-with? ((string <string>) (prefix <string>))
  (== ((js:get-property string "indexOf") prefix) 0))

(define-function even? (number)
  (== (mod number 2) 0))

(define-function odd? (number)
  (== (mod number 2) 1))
