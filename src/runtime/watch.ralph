(define-module watch
    import: (runtime/core)
    export: (watch unwatch))

;; port of Eli Grey's watch and unwatch

(define-function watch (object property handler)
  ;; built-in watch method available?
  (if (js:inline "Object.prototype.watch")
      ;; use built-in watch
      ((js:get-property object "watch") property handler)
      ;; define getter and setter for property
      (bind ((old-value (get object property))
             (current-value old-value))
        (bind-methods ((getter ()
                         current-value)
                       (setter (value)
                         (set! old-value current-value)
                         (set! current-value value)
                         (handler property old-value current-value)
                         current-value))
          ;; can't watch constants
          (when (js:delete (js:get-property object property))
            ;; ECMAScript 5 Object.defineProperty available?
            (cond
              ((js:inline "Object.defineProperty")
               ((js:inline "Object.defineProperty")
                object property (make-object
                                 "get" getter
                                 "set" setter)))
              ((and (js:inline "Object.prototype.__defineGetter__")
                    (js:idenfifier "Object.prototype.__defineSetter__"))
               ((js:get-property object "__defineGetter__") property getter)
               ((js:get-property object "__defineSetter__") property setter)))))))
  object)

(define-function unwatch (object property)
  ;; built-in unwatch method available?
  (if (js:inline "Object.prototype.unwatch")
      ;; use built-in unwatch
      ((js:get-property object "unwatch") property)
      ;; remove accessors
      (bind ((value (js:get-property object property)))
        (js:delete (js:get-property object property))
        (set! (js:get-property object property)
              value)))
  object)
