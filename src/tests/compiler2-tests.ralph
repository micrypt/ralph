(define-module tests/compiler2-tests
  import: (ralph/core ralph/test
           ralph/stream ralph/reader ralph/compiler2))


(define *environment*
  (make <environment>))

(set! (get *environment* "macros" "alpha")
      (method (_ x y)
        `(beta ,x ,y)))

(set! (get *environment* "macros" "beta")
      (method (_ x y)
        `(gamma ,x ,y)))


(check-equal "macroexpand-1: alpha"
             `(beta 1 2)
             (macroexpand-1 `(alpha 1 2) *environment*))

(check-equal "macroexpand: alpha"
             `(gamma 1 2)
             (macroexpand `(alpha 1 2) *environment*))


(check-equal "macroexpand: bind"
             `(%bind (a 1)
                (bind ((b (+ a 1)))
                  b))
              (macroexpand `(bind ((a 1)
                                   (b (+ a 1)))
                              b)
                           *environment*))

(check-equal "macroexpand-1: cond"
             `(if (a)
                  (begin 1 2)
                  (cond
                   (b 3)
                   (else: 4 5)))
              (macroexpand-1 `(cond
                               ((a) 1 2)
                               (b 3)
                               (else: 4 5))
                             *environment*))

(check-equal "macroexpand: prevent expansion of sepcial forms 2"
             `(%bind (cond
                      ((a) b)
                      (else: c))
                     d)
             (macroexpand `(%bind (cond
                                   ((a) b)
                                   (else: c))
                             d)
                          *environment*))

(check-equal "macroexpand-all: bind b"
             (symbol "b")
             (macroexpand-all `(bind ()
                                 b)
                              *environment*))


(check-equal "macroexpand-all: bind b"
             `(%bind (b (+ a 1))
                b)
             (macroexpand-all `(bind ((b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: bind a, b"
             `(%bind (a 1)
                (%bind (b (+ a 1))
                    b))
             (macroexpand-all `(bind ((a 1)
                                      (b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: and"
             `(%if 1 (%if #t (%if 2 (%if #f 3 #f) #f) #f) #f)
             (macroexpand-all `(and 1 #t 2 #f 3)
                              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: or"
             `(%bind (%_1 #f)
                (%if %_1
                     %_1
                     (%bind (%_2 2)
                       (%if %_2
                            %_2
                            3))))
             (macroexpand-all `(or #f 2 3)
                              *environment*))

(check-equal "macroexpand-all: cond"
             `(%if (a)
                   (%begin 1 2)
                   (%if b
                        3
                        (%begin 4 5)))
             (macroexpand-all `(cond
                                ((a) 1 2)
                                (b 3)
                                (else: 4 5))
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(%set x 1)
             (macroexpand-all `(set! x 1)
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(%%set-cond x 1)
             (macroexpand-all `(set! (cond x) 1)
                              *environment*))


(check-equal "macroexpand-all: parallel-set! 1"
             `(%set x 1)
             (macroexpand-all `(parallel-set! x 1)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: parallel-set! 2"
             `(%bind (%_1 1)
                (%begin
                 (%bind (%_2 (+ x 1))
                   (%begin
                    (%set z (- x y))
                    (%set y %_2)))
                 (%set x %_1)))
             (macroexpand-all `(parallel-set! x 1
                                              y (+ x 1)
                                              z (- x y))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: select"
             `(%bind (%_1 x)
                (%bind (%_2 instance?)
                  (%if (%bind (%_3 (%_2 %_1 <array>))
                         (%if %_3
                              %_3
                              (%_2 %_1
                                   <string>)))
                       (%begin
                        (print x)
                        (slice x 2))
                       (%if (%_2 %_1 <number>)
                            (* x 23)
                            (%begin
                             (do-sth)
                             else)))))
             (macroexpand-all `(select x instance?
                                 ((<array> <string>)
                                  (print x)
                                  (slice x 2))
                                 ((<number>)
                                  (* x 23))
                                 (else:
                                  (do-sth)
                                  else))
                              *environment*))

(check-equal "macroexpand-all: prevent expansion of sepcial forms"
             `(%bind (cond ((a) b))
                d)
             (macroexpand-all `(bind ((cond
                                       ((a) b)
                                       (else: c)))
                                 d)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: bind-properties"
             `(%bind (%_1 obj)
                (%bind (a (%get-property %_1 "a"))
                  (%bind (b (%get-property %_1 "b"))
                    (%begin
                     (first a)
                     (second b)))))
             (macroexpand-all `(bind-properties (a b) obj
                                 (first a)
                                 (second b))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: destructuring-bind"
             `(%bind (a (nth values 0))
                (%bind (%_1 (nth values 1))
                  (%bind (b (nth %_1 0))
                    (%bind (c (nth %_1 1))
                      (%bind (%_3 (nth %_1 2))
                        (%bind (d (nth %_3 0))
                          (%bind (e (nth %_3 1))
                            (%bind (f (slice %_3 2))
                              (%bind (%_4 (%keys f (%object "g" 1)))
                                (%bind (g (%get-property %_4 "g"))
                                  (%bind (%_2 (slice %_1 3))
                                    (%bind (%_5 (%keys %_2 (%object "h" 2)))
                                      (%bind (h (%get-property %_5 "h"))
                                        (%bind (i (nth values 2))
                                          (foo e)))))))))))))))
             (macroexpand-all `(destructuring-bind
                                   (a (b c (d e #rest f #key (g 1)) #key (h 2)) i)
                                   values
                                 (foo e))
                              *environment*))


(check-equal "required arguments: rest and key"
             [`(a b) (symbol "r") `((c 1) (d 2))]
             (analyze-lambda-list
              `(a b #rest r #key (c 1) (d 2))))

(check-equal "required arguments: rest only"
             [`(a b) (symbol "r") []]
             (analyze-lambda-list
              `(a b #rest r)))

(check-equal "required arguments: key only"
             [`(a b) #f `((c 1))]
             (analyze-lambda-list
              `(a b #key (c 1))))

(check-equal "required arguments: none, but key"
             [[] #f `((c 1))]
             (analyze-lambda-list
              `(#key (c 1))))

(check-equal "required arguments: none"
             [[] #f []]
             (analyze-lambda-list []))


(check-equal "macroexpand-all: normal method"
             `(%method (a)
                a)
             (macroexpand-all `(method (a)
                                 a)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: method with rest and keyword arguments"
             `(%method (a b)
                (%bind (r (slice %all-arguments 2))
                  (%bind (%_1 (%keys r (%object "c" 1 "d" 2)))
                    (%bind (c (%get-property %_1 "c"))
                      (%bind (d (%get-property %_1 "d"))
                        (foo c))))))
             (macroexpand-all `(method (a b #rest r #key (c 1) (d 2))
                                 (foo c))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: dotimes (for, while)"
             `(%bind (%_1 (+ (- 3 2)))
                (%bind (i 0)
                  (%begin
                   (%while (not (>= i %_1))
                     (%begin
                      ((%method (i)
                         (foo i))
                       i)
                      (%set i (+ i 1))))
                   (- i 2))))
             (macroexpand-all `(dotimes (i (+ (- 3 2)) (- i 2))
                                 (foo i))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: for-each"
             `(%bind (%_1 (%array 1 2 3 4))
                (%bind (%_2 (%array 5 6 7))
                  (%bind (%_3 #f)
                    (%bind (%_4 (%array %_1 %_2))
                      (%begin
                       (%while (not (%bind (%_5 %_3)
                                      (%if %_5
                                           %_5
                                           (any? empty? %_4))))
                         (%bind (a (first %_1))
                           (%bind (b (first %_2))
                             (%if (%bind (%_6 (> a 2))
                                    (%if %_6
                                         %_6
                                         (> b 5)))
                                  (%set %_3 #t)
                                  (%begin
                                   ((%method (a b)
                                      (baz a b))
                                    a b)
                                   (%set %_1 (rest %_1))
                                   (%set %_2 (rest %_2)))))))
                       (foo a)
                       (bar b))))))
             (macroexpand-all `(for-each ((a [1 2 3 4])
                                          (b [5 6 7]))
                                         ((or (> a 2)
                                              (> b 5))
                                          (foo a)
                                          (bar b))
                                 (baz a b))
                              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: backqoute"
             `(%array
               (%array (symbol "foo")
                       (symbol "bar")
                       3)
               (concatenate
                (%array (symbol "%array") 1 2)
                (%array 3 4))
               (+ 5 6))
             (bind ((stream (make <string-stream> string:
                                  (concatenate
                                   "`((foo bar 3) "
                                   ",(concatenate `(%array 1 2) [3 4]) "
                                   ",(+ 5 6))")))
                    (exp (read stream)))
               (macroexpand-all exp
                                *environment*)))


(check-equal "macroexpand-all: symbol macros"
             `(%begin 1 (%next-method this-method) 2)
             (macroexpand-all `(begin 1 next-method 2)
                              *environment*))


(reset-symbol-counter!)
(check-equal "alpha-convert: single method"
             `(%method (%_1) 1)
             (alpha-convert `(%method (a) 1)
                            (make-object)))

(reset-symbol-counter!)
(check-equal "alpha-convert: nested methods"
             `((%method (%_1)
                 ((%method (%_2)
                    %_2)
                  %_1))
               1)
             (alpha-convert `((%method (a)
                                ((%method (a)
                                   a)
                                 a))
                              1)
                            (make-object)))

;; TODO: test alpha-convert for bind


;;(check-equal "beta-reduce: single argument: variable"
;;             `((%method () (+ y y)))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            y)
;;                          (make-object)))

;;(check-equal "beta-reduce: single argument: value"
;;             `((%method () (+ 1 y)))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            1)
;;                          (make-object)))

;;(check-equal "beta-reduce: single argument: expression"
;;             `((%method (x)
;;                 (+ x y))
;;               (+ x 1))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            (+ x 1))
;;                          (make-object)))

;; TODO: test beta-reduce for bind


(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all `(bind ((a 1)
                                 (b 2))
                            (- 1 c)
                            (+ a b))
                         *environment*)))

  (check-equal ""
               `(%bind (a 1)
                  (%bind (b 2)
                    (%begin
                     (- 1 c)
                     (+ a b))))
               expanded)
  (check-equal ""
               `(%bind (%_1 1)
                  (%bind (%_2 2)
                    (%begin
                     (- 1 c)
                     (+ %_1 %_2))))
               (alpha-convert expanded (make-object))))



(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all `((method (a b)
                             (- 1 c)
                             (+ a b))
                           1 2)
                         *environment*)))

  (check-equal ""
               `((%method (a b)
                   (%begin
                    (- 1 c)
                    (+ a b)))
                 1 2)
               expanded)
  (reset-symbol-counter!)
  (check-equal ""
               `((%method (%_1 %_2)
                   (%begin
                    (- 1 c)
                    (+ %_1 %_2)))
                 1 2)
               (alpha-convert expanded (make-object))))

(check-true "atomic? on number" (atomic? 1))

(check-false "atomic? on array" (atomic? []))

(reset-symbol-counter!)
(check-equal "ANF: simple expression"
             `(+ 1 2)
             (normalize-term
              `(+ 1 2)))

(reset-symbol-counter!)
(check-equal "ANF: nested expression"
             `(+ (- 2 1) 2)
             (normalize-term `(+ (- 2 1) 2)))

(reset-symbol-counter!)
(check-equal "ANF: bind"
             `(%bind (%_1 (+ 2 2))
                (%bind (x 1)
                  (%bind (%_2 (f x))
                    (+ %_1 %_2))))
             (normalize-term
              (macroexpand-all
               `(+ (+ 2 2)
                   (bind ((x 1))
                     (f x)))
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: begin"
             `(%begin
               1
               (%begin
                (+ 2 2)
                (%bind (%_1 (- 3 3))
                  (%bind (x 1)
                    (%bind (%_2 (f x))
                      (+ %_1 %_2))))))
             (normalize-term
              (macroexpand-all
               `(begin
                 1
                 (+ (begin (+ 2 2) (- 3 3))
                    (bind ((x 1))
                      (f x))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: if"
             `(%bind (%_1 (= n 0))
                (%if %_1
                     1
                     (* n (f (- n 1)))))
             (normalize-term
              (macroexpand-all
               `(if (= n 0)
                    1
                    (* n (f (- n 1))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: application"
             `(%bind (id (%method (x) x))
                (%bind (apply (%method (f x) (f x)))
                  ((id apply) (id 3))))
             (normalize-term
              (macroexpand-all
               `(bind ((id (method (x) x))
                       (apply (method (f x) (f x))))
                  ((id apply) (id 3)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: method"
             `(%method (a)
                (%method (b)
                  (%begin
                   (- a b)
                   (+ (- a b) b))))
             (normalize-term
              (macroexpand-all
               `(method (a)
                  (method (b)
                    (- a b)
                    (+ (- a b) b)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: begin"
             `(%begin
               1
               (%begin
                (c)
                (%begin
                 (b (+ 1 (a)))
                 (%begin
                  5
                  (- (d) 23)))))
             (normalize-term
              (macroexpand-all
               `(begin
                 1
                 (begin
                  (c)
                  (b (+ 1 (a))))
                 5
                 (- (d) 23))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: set!"
             `(%bind (%_1 (+ (- b 3) c))
                (%bind (%_2 (%set a %_1))
                  (%begin
                   %_2
                   (%bind (%_3 (%set z a))
                     (%bind (%_4 (* %_3 5))
                       (%bind (%_5 (%set x %_4))
                         %_5))))))
             (normalize-term
              (macroexpand-all
               `(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z a) 5)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression"
             `(%%set-foo x (+ 2 3))
             (normalize-term
              (macroexpand-all
               `(set! (foo x) (+ 2 3))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression and keywords"
             `(%%set-foo x (+ 2 3)
                         animated?: (> (bar x) 1))
             (normalize-term
              (macroexpand-all
               `(set! (foo x) (+ 2 3)
                      animated?: (> (bar x) 1))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: or"
             ;; usage of %if as expression OK,
             ;; not in statement form yet
             `(%bind (%_1 #f)
                (%bind (%_3 (%if %_1
                                 %_1
                                 (%bind (%_2 2)
                                   (%if %_2 %_2 3))))
                  (foo %_3 bar)))
             (normalize-term
              (macroexpand-all
               `(foo (or #f 2 3) bar)
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: while"
             `(%bind (counter 5)
                (%bind (result 1)
                  (%begin
                   (%while (> counter 0)
                     (%bind (%_1 (* factorial counter))
                       (%bind (%_2 (%set factorial %_1))
                         (%begin
                          %_2
                          (%bind (%_3 (- counter 1))
                            (%bind (%_4 (%set counter %_3))
                              %_4))))))
                   counter)))
             (normalize-term
              (macroexpand-all
               `(bind ((counter 5)
                       (result 1))
                  (while (> counter 0)
                    (set! factorial (* factorial counter))
                    (set! counter (- counter 1)))
                  counter)
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: while as expression"
             `(%bind (run? #t)
                (%bind (value (%while run?
                                (%begin
                                 (foo)
                                 (%bind (%_1 (%set run? #f))
                                   (%begin
                                    %_1
                                    23)))))
                  (== value #f)))
             (normalize-term
              (macroexpand-all
               `(bind ((run? #t)
                       (value
                        (while run?
                          (foo)
                          (set! run? #f)
                          23)))
                  (== value #f))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: begin as expression"
             `(%bind (%_1 (curry + 1))
                (%begin
                 1
                 (%bind (%_2 (+ 2 3))
                   (%_1 %_2 4))))
             (normalize-term
              (macroexpand-all
               `((curry + 1) (begin 1 (+ 2 3)) 4)
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: select"
             `(%bind (%_1 x)
                (%bind (%_2 instance?)
                  (%bind (%_3 (%_2 %_1 <array>))
                    (%bind (%_4 (%if %_3 %_3 (%_2 %_1 <string>)))
                      (%if %_4
                           (%begin
                            (print x)
                            (slice x 2))
                           (%bind (%_5 (%_2 %_1 <number>))
                             (%if %_5
                                  (* x 23)
                                  (%begin
                                   (do-sth)
                                   else))))))))
             (normalize-term
              (macroexpand-all `(select x instance?
                                  ((<array> <string>)
                                   (print x)
                                   (slice x 2))
                                  ((<number>)
                                  (* x 23))
                                  (else:
                                   (do-sth)
                                   else))
                               *environment*)))

(reset-symbol-counter!)
(check-equal "statements: or"
             `(%bind (%_1 #f)
                (%bind (%_3 #f)
                  (%begin
                   (%if %_1
                        (%set %_3 %_1)
                        (%bind (%_2 2)
                          (%if %_2
                               (%set %_3 %_2)
                               (%set %_3 3))))
                   (%return (foo %_3 bar)))))
             (add-explicit-return
              (transform-statements
               (normalize-term
                (macroexpand-all
                 `(foo (or #f 2 3) bar)
                 *environment*)))))

(reset-symbol-counter!)
(check-equal "statements: if exp. in if stmt."
             `(%bind (%_1 #f)
                (%begin
                 (%if a
                      (%set %_1 1)
                      (%set %_1 2))
                 (%if %_1
                      3
                      4)))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(if (if a 1 2) 3 4)
                 *environment*))))

(reset-symbol-counter!)
(check-equal "statements: while exp. in while stmt."
             `(%while (> a 2)
                (%bind (a #f)
                  (%begin
                   (%begin
                    (%while (< b 3)
                      (%if a
                           (%bind (c #f)
                             (%begin
                              (%if c
                                   (%set c 5)
                                   (%set c 6))
                              c))
                           #f))
                    (%set a #f))
                   4)))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(while (> a 2)
                    (bind ((a (while (< b 3)
                                (if a
                                    (bind ((c (if c 5 6)))
                                      c)
                                    #f))))
                      4))
                 *environment*))))


(reset-symbol-counter!)
(check-equal "statements: value of while applied to method"
             `(%bind (y 5)
                (%bind (%_1 (%method (x) (%if x 1 2)))
                  (%bind (%_4 #f)
                    (%begin
                     (%begin
                      (%while (> y 2)
                        (%bind (%_2 (- y 1))
                          (%bind (%_3 (%set y %_2))
                            %_3)))
                      (%set %_4 #f))
                     (%_1 %_4)))))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(bind ((y 5))
                    ((method (x) (if x 1 2))
                     (while (> y 2)
                       (dec! y))))
                 *environment*))))


(define-function all-passes (code)
  (reset-symbol-counter!)
  (bind ((top-expanded (macroexpand-program code))
         (_ (format-out "1: %=\n\n" top-expanded))
         (expanded (macroexpand-all top-expanded *environment*))
         (_ (format-out "2: %=\n\n" expanded))
         (alpha-converted (alpha-convert expanded (make-object)))
         (_ (format-out "3: %=\n\n" alpha-converted))
         (normalized (normalize-term alpha-converted))
         (_ (format-out "4: %=\n\n" normalized))
         (statements (transform-statements normalized))
         (_ (format-out "5: %=\n\n" statements)))))


(all-passes
 `(bind ((gcd (method (a b)
                (cond
                 ((> a b)
                  (gcd (- a b) b))
                 ((< a b)
                  (gcd (- b a) a))
                 (else: a)))))
    (gcd 28974330 310200)))


(all-passes
 `(method (view animated?)
    (when (get view "bounces?")
      (destructuring-bind (x y) (get view "offset")
        (bind ((max-point (get view "max-point"))
               (offset (limit [x y] [0 0] max-point)))
          (when (or (not (== (first offset) x))
                    (not (== (second offset) y)))
            (set! (content-offset view)
                  offset
                  animated?: animated?)
            (when animated?
              (begin-snap-animation view))))))))

;;
`(%method (%_3 %_4)
   (%if (get %_3 "bounces?")
        (%bind (%_5 (get %_3 "offset"))
          (%bind (%_6 (nth %_5 0))
            (%bind (%_7 (nth %_5 1))
              (%bind (%_8 (get %_3 "max-point"))
                (%bind (%_9 (limit (%array %_6 %_7) (%array 0 0) %_8))
                  (%bind (%_10 (not (== (first %_9) %_6)))
                    (%bind (%_11 #f)
                      (%begin
                       (%if %_10
                            (%set %_11 %_10)
                            (%set %_11 (not (== (second %_9) %_7))))
                       (%if %_11
                            (%begin
                             (%%set-content-offset %_3 %_9 animated?: %_4)
                             (%if %_4
                                  (%return (begin-snap-animation %_3))
                                  (%return #f)))
                            (%return #f))))))))))
        (%return #f)))



(reset-symbol-counter!)
(check-equal "lift-symbols: simple"
            `(%bind (%_1 (symbol "a"))
               %_1)
             (lift-symbols
              (macroexpand-all
               `(begin (symbol "a"))
               *environment*)))


(reset-symbol-counter!)
(check-equal "lift-symbols: multiple uses"
            `(%bind (%_1 (symbol "a"))
               (%bind (%_2 (symbol "b"))
                 (%bind (%_3 (symbol "c"))
                   (%bind (a %_1)
                     (%bind (b %_2)
                       (foo a %_1 b %_2 %_3))))))
             (lift-symbols
              (macroexpand-all
               `(bind ((a (symbol "a"))
                       (b (symbol "b")))
                  (foo
                   a (symbol "a")
                   b (symbol "b")
                   (symbol "c")))
               *environment*)))

(reset-symbol-counter!)
(check-equal "lift-symbols: bind"
             `(%bind (%_1 (symbol "a"))
                (%begin
                 %_1
                 (%bind (symbol "a")
                   (%bind (a %_1)
                     (foo a %_1)))))
             (lift-symbols
              (macroexpand-all
               `(begin
                 (symbol "a")
                 (bind ((symbol "a"))
                   (bind ((a (symbol "a")))
                     (foo a (symbol "a")))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "lift-symbols: method"
             `(%bind (%_1 (symbol "a"))
                (%begin
                 23
                 (%method (x)
                   %_1)))
             (lift-symbols
              (macroexpand-all
               `(begin
                 23
                 (method (x)
                   (symbol "a")))
               *environment*)))

(reset-symbol-counter!)
(check-equal "lift-symbols: method"
             `(%method (symbol)
                symbol)
             (lift-symbols
              (macroexpand-all
               `(method (symbol)
                  symbol)
               *environment*)))

(reset-symbol-counter!)
(check-equal "lift-symbols: set!"
             `(%bind (%_1 (symbol "b"))
                (%%set-symbol "a" %_1))
             (lift-symbols
              (macroexpand-all
               `(set! (symbol "a")
                      (symbol "b"))
               *environment*)))

(reset-symbol-counter!)
(check-equal "lift-symbols: begin, if, while"
             `(%bind (%_1 (symbol "a"))
                (%bind (%_2 (symbol "b"))
                  (%bind (%_3 (symbol "c"))
                    (%begin
                     (%if %_1
                          (%while (bar %_2)
                            (%begin %_1 23 %_3))
                          %_3)
                     %_2))))
             (lift-symbols
              (macroexpand-all
               `(begin
                 (if (symbol "a")
                     (while (bar (symbol "b"))
                       (symbol "a")
                       23
                       (symbol "c"))
                     (symbol "c"))
                 (symbol "b"))
               *environment*)))

(reset-symbol-counter!)
(check-equal "fold-bindings"
             `(%begin
               (js:var (%_1 (symbol "a"))
                       (%_2 (symbol "b"))
                       (%_3 (symbol "c")))
               (%begin
                (%if %_1
                     (%while (bar %_2)
                       (%begin %_1 23 %_3))
                     %_3)
                %_2))
             (fold-bindings
              (lift-symbols
               (macroexpand-all
                `(begin
                  (if (symbol "a")
                      (while (bar (symbol "b"))
                        (symbol "a")
                        23
                        (symbol "c"))
                      (symbol "c"))
                  (symbol "b"))
                *environment*))))