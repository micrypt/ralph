(define-module tests/compiler2-tests
  import: (ralph/core ralph/test
           ralph/stream ralph/reader ralph/compiler2))

(define *environment*
  (make <environment>))

(set! (get *environment* "macros" "alpha")
      (method (_ x y)
        `(beta ,x ,y)))

(set! (get *environment* "macros" "beta")
      (method (_ x y)
        `(gamma ,x ,y)))


(check-equal "macroexpand-1: alpha"
             `(beta 1 2)
             (macroexpand-1 `(alpha 1 2) *environment*))

(check-equal "macroexpand: alpha"
             `(gamma 1 2)
             (macroexpand `(alpha 1 2) *environment*))


(check-equal "macroexpand: bind"
             `((%method (a)
                 (bind ((b (+ a 1)))
                   b))
               1)
              (macroexpand `(bind ((a 1)
                                   (b (+ a 1)))
                              b)
                           *environment*))

(check-equal "macroexpand: cond"
             `(if (a)
                  (begin 1 2)
                  (cond
                   (b 3)
                   (else: 4 5)))
              (macroexpand `(cond
                             ((a) 1 2)
                             (b 3)
                             (else: 4 5))
                           *environment*))

(check-equal "macroexpand: prevent expansion of sepcial forms"
             `((%method (cond)
                 (bind () d))
               ((a) b))
             (macroexpand `(bind ((cond
                                   ((a) b)
                                   (else: c)))
                             d)
                          *environment*))

(check-equal "macroexpand-all: bind b"
             (symbol "b")
             (macroexpand-all `(bind ()
                                 b)
                              *environment*))


(check-equal "macroexpand-all: bind b"
             `((%method (b)
                 b)
               (+ a 1))
             (macroexpand-all `(bind ((b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: bind a, b"
             `((%method (a)
                 ((%method (b)
                    b)
                  (+ a 1)))
               1)
             (macroexpand-all `(bind ((a 1)
                                      (b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: cond"
             `(if (a)
                  (%begin 1 2)
                  (if b
                      3
                      (%begin 4 5)))
             (macroexpand-all `(cond
                                ((a) 1 2)
                                (b 3)
                                (else: 4 5))
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(%set x 1)
             (macroexpand-all `(set! x 1)
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(%%set-cond x 1)
             (macroexpand-all `(set! (cond x) 1)
                              *environment*))


(check-equal "alpha-convert: single method"
             `(%method (%_1) 1)
             (alpha-convert `(%method (a) 1)
                            (make-object)))

(check-equal "alpha-convert: nested methods"
             `((%method (%_2)
                 ((%method (%_3)
                    %_3)
                  %_2))
               1)
             (alpha-convert `((%method (a)
                                ((%method (a)
                                   a)
                                 a))
                              1)
                            (make-object)))

(check-equal "beta-reduce: single argument: variable"
             `(begin (+ y y))
             (beta-reduce `((%method (x)
                              (+ x y))
                            y)
                          (make-object)))

(check-equal "beta-reduce: single argument: value"
             `((%method (x)
                 (+ x y))
               1)
             (beta-reduce `((%method (x)
                              (+ x y))
                            1)
                          (make-object)))

(check-equal "beta-reduce: single argument: expression"
             `((%method (x)
                 (+ x y))
               (+ x 1))
             (beta-reduce `((%method (x)
                              (+ x y))
                            (+ x 1))
                          (make-object)))

(bind ((a (make-object "a" 1))
       (b (wrap-object a "b" 2))
       (c (wrap-object b "c" 3)))
  ((js:inline "console.error")
   (js:get-property b "a")))

(bind ((expanded
        (macroexpand-all `(bind ((a 1)
                                 (b 2))
                            (+ a b))
                         *environment*)))
  ((js:inline "console.error") (description expanded))
  ((js:inline "console.error")
   (description (alpha-convert expanded (make-object))))
  ((js:inline "console.error")
   (description (beta-reduce (alpha-convert
                              expanded
                              (make-object))
                             (make-object))))

  )






