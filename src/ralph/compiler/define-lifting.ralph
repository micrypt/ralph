(define-module ralph/compiler/define-lifting
  import: (ralph/compiler/utilities)
  export: (lift-defines))

;; replace defines with top-level %defines
;; and local assignments

(define-function lift-defines (exp env)
  (lift-define exp env identity))

(define-function lift-define (exp env k)
  (if (expression? exp)
      (select (symbol-name (first exp)) ==
        (("%bind")
         (destructuring-bind (_ (var value) body) exp
           (lift-define
            value env
            (method (lvalue env)
              (lift-define
               body env
               (method (lbody env)
                 (k `(%bind (,var ,lvalue)
                       ,lbody)
                    env)))))))
        (("%try")
         (destructuring-bind (m e1 v e2) exp
           (lift-define*
            [e1 e2] env
            (method (le* env)
              (destructuring-bind (le1 le2) le*
                (k `(,m ,le1 ,v ,le2)
                   env))))))
        (("%set")
         (destructuring-bind (_ e1 e2) exp
           (lift-define
            e2 env
            (method (le2 env)
              (k `(%set ,e1 ,le2)
                 env)))))
        (("%method")
         (destructuring-bind (_ name arguments body) exp
           (lift-define
            body env
            (method (lbody env)
              (k `(%method ,name ,arguments ,lbody)
                 env)))))
        (("%begin" "%if" "%while"  "%array"
          "%object" "%get-property" "%infix"
          "%native" "%native-name" "%native-call"
          "%plus" "%minus" "%times" "%divide")
         (destructuring-bind (m #rest e*) exp
           (lift-define*
            e* env
            (method (le* env)
              (k (concatenate [m] le*)
                 env)))))
        ;; leave as-is
        (("%symbol")
         (k exp))
        (("%define")
         (bind ((identifier (second exp)))
           (destructuring-bind (module-name name)
               (module-name/name identifier)
             (if (get env "defined?" module-name name)
                 (k #f env)
                 (begin
                  (set! (get env "defined?" module-name name) #t)
                  `(%begin
                    (%define ,identifier)
                    ,(k #f env)))))))
        (else:
         (lift-define** exp env k)))
      (k exp env)))

(define-function lift-define* (exp* env k)
  (if (empty? exp*)
      (k [] env)
      (lift-define** exp* env k)))

(define-function lift-define** (exp env k)
  (lift-define
   (first exp) env
   (method (t env)
     (lift-define*
      (rest exp) env
      (method (t* env)
        (k (concatenate [t] t*)
           env))))))

