
(define-module ralph/compiler/anf.test
  import: (ralph/test
           ralph/compiler/macroexpansion
           ralph/compiler/anf
           ralph/compiler/environment.test))


(define *environment*
  (make-test-environment "ralph/compiler/anf.test"))


;;;; 

(reset-symbol-counter!)
(check-equal "ANF: simple expression"
             `(+ 1 2)
             (normalize-term
              `(+ 1 2)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested expression"
             `(+ (- 2 1) 2)
             (normalize-term `(+ (- 2 1) 2)
                             *environment*))

(reset-symbol-counter!)
(check-equal "ANF: bind"
             `(%bind ($1 (,'+ 2 2))
                (%bind (,'x 1)
                  (%bind ($2 (,'f ,'x))
                    (,'+ $1 $2))))
             (normalize-term
              (macroexpand-all
               '(+ (+ 2 2)
                   (bind ((x 1))
                     (f x)))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: begin 1"
             `(%begin
               1
               (%begin
                (,'+ 2 2)
                (%bind ($1 (,'- 3 3))
                  (%bind (,'x 1)
                    (%bind ($2 (,'f ,'x))
                      (,'+ $1 $2))))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (+ (begin (+ 2 2) (- 3 3))
                    (bind ((x 1))
                      (f x))))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: if: trivial expressions"
             `(%if (,'= ,'n 0)
                   1
                   (,'* ,'n (,'f (,'- ,'n 1))))
             (normalize-term
              (macroexpand-all
               '(if (= n 0)
                    1
                    (* n (f (- n 1))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: application"
             `(%bind (,'id (%method ,'$1 (,'x) ,'x))
                (%bind (,'apply (%method ,'$2 (,'f ,'x) (,'f ,'x)))
                  ((,'id ,'apply) (,'id 3))))
             (normalize-term
              (macroexpand-all
               '(bind ((id (method (x) x))
                       (apply (method (f x) (f x))))
                  ((id apply) (id 3)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: method"
             `(%method ,'$1 (,'a)
                (%method ,'$2 (,'b)
                  (%begin
                   (,'- ,'a ,'b)
                   (,'+ (,'- ,'a ,'b) ,'b))))
             (normalize-term
              (macroexpand-all
               '(method (a)
                  (method (b)
                    (- a b)
                    (+ (- a b) b)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin 2"
             `(%begin
               1
               (%begin
                (,'c)
                (%begin
                 (,'b (,'+ 1 (,'a)))
                 (%begin
                  5
                  (,'- (,'d) 23)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (begin
                  (c)
                  (b (+ 1 (a))))
                 5
                 (- (d) 23))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested set!"
             `(%begin
               (%set ,'a (,'+ (,'- ,'b 3) ,'c))
               (%set ,'x (,'* (%set ,'z ,'a) 5)))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z a) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression"
             '(foo-setter x (+ 2 3))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: nested set! with if"
             `(%begin
               (%set ,'a (,'+ (,'- ,'b 3) ,'c))
               (%bind ($1 (%if ,'a ,'b ,'c))
                 (%bind ($2 (%set ,'z $1))
                   (%bind ($3 (,'* $2 5))
                     (%set ,'x $3)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z (if a b c)) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression and keywords"
             '(foo-setter x (+ 2 3)
                          animated?: (> (bar x) 1))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3)
                      animated?: (> (bar x) 1))
               *environment*)
              *environment*))

;; TODO: why is $3 not namespaced?
(reset-symbol-counter!)
(check-equal "ANF: or"
             ;; usage of %if as expression OK,
             ;; not in statement form yet
             `(%bind (,'$1 #f)
                (%bind ($3 (%if ,'$1
                                ,'$1
                                (%bind (,'$2 2)
                                  (%if ,'$2 ,'$2 3))))
                  (,'foo $3 ,'bar)))
             (normalize-term
              (macroexpand-all
               '(foo (or #f 2 3) bar)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while"
             `(%bind (,'counter 5)
                (%bind (,'result 1)
                  (%begin
                   (%while (,'> ,'counter 0)
                     (%begin
                      (%set ,'factorial (,'* ,'factorial ,'counter))
                      (%set ,'counter (,'- ,'counter 1))))
                   ,'counter)))
             (normalize-term
              (macroexpand-all
               '(bind ((counter 5)
                       (result 1))
                  (while (> counter 0)
                    (set! factorial (* factorial counter))
                    (set! counter (- counter 1)))
                  counter)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while as expression"
             `(%bind (,'run? #t)
                (%bind (,'value (%while ,'run?
                                   (%begin
                                    (,'foo)
                                    (%begin
                                     (%set ,'run? #f)
                                     23))))
                  (,'== ,'value #f)))
             (normalize-term
              (macroexpand-all
               '(bind ((run? #t)
                       (value
                        (while run?
                          (foo)
                          (set! run? #f)
                          23)))
                  (== value #f))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: while in if"
             `(%bind ($1 (%while ,'run?
                             (,'foo)))
                (%bind (,'x (%if $1 42 23))
                  (,'bar ,'x)))
             (normalize-term
              (macroexpand-all
               '(bind ((x (if (while run?
                                (foo))
                              42
                              23)))
                  (bar x))
               *environment*)
              *environment*))


;; TODO [#A]: $2 namespaces, $1 not?!

(reset-symbol-counter!)
(check-equal "ANF: if in while"
             `(%while #t
                (%bind (,'$1 (,'foo))
                  (%bind ($2 (%if ,'$1 ,'$1 (,'bar)))
                    (%if $2
                         (,'baz)
                         (%native "break")))))
             (normalize-term
              (macroexpand-all
               '(while (or (foo) (bar))
                  (baz))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin as expression"
             `(%bind ($1 (,'curry ,'+ 1))
                (%begin
                 1
                 (%bind ($2 (,'+ 2 3))
                   ($1 $2 4))))
             (normalize-term
              (macroexpand-all
               '((curry + 1) (begin 1 (+ 2 3)) 4)
               *environment*)
              *environment*))

;; TODO [#A]: $1, $2 not namespaced, but $3?!

(reset-symbol-counter!)
(check-equal "ANF: select"
             `(%bind (,'$1 ,'x)
                (%bind (,'$2 (,'instance? ,'$1 ,'<array>))
                  (%bind ($3 (%if ,'$2 ,'$2 (,'instance? ,'$1 ,'<string>)))
                    (%if $3
                         (%begin
                          (,'print ,'x)
                          (,'slice ,'x 2))
                         (%if (,'instance? ,'$1 ,'<number>)
                              (,'* ,'x 23)
                              (%begin
                               (,'do-sth)
                               ,'else))))))
             (normalize-term
              (macroexpand-all
               '(select x instance?
                  ((<array> <string>)
                   (print x)
                   (slice x 2))
                  ((<number>)
                   (* x 23))
                  (else:
                   (do-sth)
                   else))
               *environment*)
              *environment*))


;; TODO [#A]: $1, $2 not namespaced, but $3?!
(reset-symbol-counter!)
(check-equal "ANF: if in expression"
             `(%method ,'$1 ()
                (,'bar (%method ,'$2 (,'item)
                         (%bind ($3 (%if ,'a ,'b ,'c))
                           (,'baz $3 ,'item)))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         (baz (if a b c)
                              item))))
               *environment*)
              *environment*))

;; TODO [#A]: $1, $2 not namespaced, but $3 and $4?!
(reset-symbol-counter!)
(check-equal "ANF: if in expression 2"
             `(%method ,'$1 ()
                (,'bar (%method ,'$2 (,'item)
                         (%bind ($3 (%if ,'c ,'b ,'a))
                           (%bind ($4 (%if ,'a ,'b ,'c))
                             ($3 $4 ,'item))))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         ((if c b a)
                          (if a b c)
                          item))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while in if in exp"
             `(%bind ($1 (%while run? (foo)))
                (%bind ($2 (%if $1 42 23))
                  (foo $2)))
             (normalize-term
              (macroexpand-all
               `(foo (if (while run?
                           (foo))
                         42
                         23))
               *environment*)
              *environment*))
