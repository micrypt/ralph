
(define-module ralph/compiler/macroexpansion.test
  import: (ralph/test
           ralph/stream
           ralph/compiler/module
           ralph/compiler/environment
           ralph/compiler/macroexpansion
           ralph/compiler/macros
           ralph/compiler/special-forms
           ralph/compiler/reader))


(define-function make-environment ()
  (bind ((module (make <module> name: "ralph/compiler/macroexpansion.test")))
    ;; (import-module module "ralph/core")

    (bind ((symbol-macros
            (make-plain-object)))
      (set! (get symbol-macros "foo")
            (method (_)
              `(when 23 42)))
      (chain-object symbol-macros
                    $core-symbol-macros)
      (make <environment>
            module: module
            special-forms: $all-special-forms
            macros: $core-macros
            symbol-macros: symbol-macros))))

(define *environment*
  (make-environment))



;; interaction between special forms, macros and symbol macros


(set! (get *environment* "symbol-macros" "bar")
      (method (_)
        'foo))

(set! (get *environment* "symbol-macros" "when2")
      (method (_)
        'when))


(check-equal "symbol macro: foo"
             `(,'+ 1 (if 23 (begin 42) #f))
             (macroexpand-all
              '(+ 1 foo)
              *environment*))



(check-equal "symbol macro at head"
             `((if 23 (begin 42) #f) ,'x ,'y)
             (macroexpand-all
              '(foo x y)
              *environment*))

(check-equal "symbol macro at head (two levels)"
             `((if 23 (begin 42) #f) ,'x ,'y)
             (macroexpand-all
              '(bar x y)
              *environment*))

(check-equal "symbol macro expanding to symbol with macro definition"
             `(if ,'x (begin ,'y) #f)
             (macroexpand-all
              '(when2 x y)
              *environment*))

(check-equal "symbol macro (two levels)"
             `(,'+ (if 23 (begin 42) #f) 2)
             (macroexpand-all
              '(+ bar 2)
              *environment*))

(check-equal "macros and special forms shadowing"
             `(,'+ 1 (bind ((,'quote
                             ;; quote special form and when macro still works
                             (if 5 (begin (quote (,'when 7 8))) #f))
                            (,'when (method (,'foo ,'b)
                                      ;; parameter foo shadows symbol macro
                                      ;; when macro still works
                                      (,'not (if ,'foo
                                                 (begin ,'b)
                                                 #f)))))
                       ;; TODO [#A]: foo only expands to when, but should completely to if:
                       ;; (,'- (if 23 (begin 42) #f) ,'xyz)
                       ;; -> expansion needs to take symbol's module into account (hygienic expansion)
                       ;; - foo is producing ralph/core::when so shouldn't clash with locally bound when
                       (,'- (when 23 42) ,'xyz)
                       ;; when binding shadows when macro
                       (,'when ,'a ,'b)
                       ;; quote special form not shadowed
                       (quote (,'when ,'a ,'b))))
             (macroexpand-all
              '(+ 1 (bind ((quote (when 5 (quote (when 7 8))))
                           (when (method (foo b) (not (when foo b)))))
                      (- foo xyz)
                      (when a b)
                      (quote (when a b))))
              *environment*))

(check-equal "identifiers shadow macros, but not special forms: method"
             `(method (,'when ,'quote ,'foo)
                ,'foo
                (quote (,'when 1 2))
                (,'when 3 4))
             (macroexpand-all
              '(method (when quote foo)
                 foo
                 (quote (when 1 2))
                 (when 3 4))
              *environment*))


(define-function read-form (source)
  (read (make <string-stream>
              string: source)
        *environment*))


(set! (get *environment* "special-forms")
      $internal-special-forms)
(chain-object (get *environment* "macros")
              $internal-macros)

(reset-symbol-counter!)
(check-equal "macroexpand-all to IR: define-function"
             (read-form
              "(ralph/core::%define foo
                 (ralph/core::%make-function
                   (ralph/core::%native-name \"foo\")
                   (ralph/core::%method $1 (a b)
                     (ralph/core::%bind (all (ralph/core::%native-call \"$SL.call\" %all-arguments 2))
                       (ralph/core::%bind ($2 (ralph/core::%keys all (ralph/core::%object \"c\" 23 \"d\" #f)))
                         (ralph/core::%bind (c (ralph/core::%get-property $2 \"c\"))
                           (ralph/core::%bind (d (ralph/core::%get-property $2 \"d\"))
                             (ralph/core::%bind (when (ralph/core::%if a b #f))
                               (when c d)))))))
                   #f))")
             (macroexpand-all '(define-function foo ((a <object>) b #rest all #key (c 23) d)
                                 (bind ((when (when a b))) (when c d)))
                              *environment*))