(define-module ralph/compiler/flattening
  import: (ralph/compiler/utilities)
  export: (flatten-statements!))


(define-function flatten-begins (exps)
  (reduce1 concatenate
           (map (method (exp)
                  (bind ((flattened (flatten-statements! exp)))
                    (if (and (instance? flattened <array>)
                             (not (empty? flattened))
                             (== (first flattened)
                                 (symbol "%begin")))
                        (rest flattened)
                        [flattened])))
                exps)))


(define-function flatten-vars! (exps)
  (reduce (method (result exp)
            (bind ((previous (and (not (empty? result))
                                  (last result)))
                   (previous-var? (and previous
                                       (var? previous))))
              (if (and previous-var? (var? exp))
                  ;; add current bindings to previous
                  (begin
                   (do (method (binding)
                         (push-last (last result)
                                    binding))
                       (rest exp))
                   result)
                  ;; add assignment to previous binding?
                  (bind ((merge? (and previous-var? (set? exp)))
                         (binding (and merge? (last (last result))))
                         (identifier (and merge? (second exp))))
                    (if (== (first binding)
                            identifier)
                        (begin
                         (set! (second binding)
                               (third exp))
                         result)
                        (concatenate result [exp]))))))
          [] exps))

(define-function flatten-statements! (exp)
  (if (instance? exp <array>)
      (select (symbol-name (first exp)) ==
        (("%method" "%while" "%set")
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (("%begin")
         (destructuring-bind (_ #rest exps) exp
           (maybe-begin
            (flatten-vars!
             (flatten-begins exps)))))
        (("%bind")
         (destructuring-bind (_ binding body) exp
           (flatten-statements!
            `(%begin
              (%var ,binding)
              ,body))))
        (("%if")
         (set! (third exp)
               (flatten-statements! (third exp)))
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (("%try")
         (set! (second exp)
               (flatten-statements! (second exp)))
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (else:
         (map flatten-statements! exp)))
      exp))
