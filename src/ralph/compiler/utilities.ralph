(define-module ralph/compiler/utilities
  export: (expression? setter-identifier?
           reset-symbol-counter! generate-symbol
           maybe-begin destructure-symbol
           var? set? method? begin? define?
           *defined* localize
           bind! bound? unbind!
           remove-defined-identifiers))

;;;; utilities

(define-function expression? (form)
  (and (instance? form <array>)
       (not (empty? form))
       (instance? (first form) <symbol>)))

(define-function var? (exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           "%var")))

(define-function set? (exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           "%set")))

(define-function define? (exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           "%define")))

(define-function method? (exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           "%method")))

(define-function begin? (exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           "%begin")))

(define-function setter-identifier? (form)
  (and (instance? form <array>)
       (== (size form) 2)
       (every? (rcurry instance? <symbol>)
               form)
       (== (symbol-name (first form))
           "setter")))

(define *symbol-count* 0)

(define-function reset-symbol-counter! ()
  (set! *symbol-count* 0))

(define-function generate-symbol (env prefix)
  (bind ((name (concatenate
                (if prefix
                    (concatenate prefix "_")
                    "$")
                (as-string (inc! *symbol-count*))))
         (result (symbol name (when env
                                (get env "module" "name")))))
    (set! (get result "generated?") #t)
    result))


(define-function maybe-begin (expressions)
  (select (size expressions) ==
    ((0) #f)
    ((1) (first expressions))
    (else:
     (concatenate `(%begin)
                  expressions))))

(define-function destructure-symbol (identifier)
  [(get identifier "name")
   (get identifier "module")])

(define-function localize (identifier env)
  (if (get identifier "module")
      identifier
      (symbol (symbol-name identifier)
              (get env "module" "name"))))

(define-function bind! (env identifier)
  (inc! (get env "binding-count"
             (symbol-name identifier))))

(define-function bound? (env identifier)
  (if-bind (count (get env "binding-count"
                       (symbol-name identifier)))
    (> count 0)))

(define-function unbind! (env identifier)
  (dec! (get env "binding-count"
             (symbol-name identifier))))

(define-function remove-defined-identifiers (identifiers env)
  (choose (method (identifier)
            (destructuring-bind (name module-name)
                (destructure-symbol identifier)
              (not (get env "defined?"
                        module-name name))))
          identifiers))