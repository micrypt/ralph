(define-module ralph/compiler/statements
  import: (ralph/compiler/utilities)
  export: (transform-statements!))


;; "sink"/wrap return value with expression
;; e.g. to assign or explicitly return

(define-function wrap-value! (exp wrapper)
  (if (instance? exp <array>)
      (select (symbol-name (first exp)) ==
        (("%begin" "%bind")
         ;; wrap body
         (set! (last exp)
               (wrap-value! (last exp) wrapper))
         exp)
        (("%if")
         ;; wrap then and else
         (set! (third exp)
               (wrap-value! (third exp) wrapper))
         (set! (last exp)
               (wrap-value! (last exp) wrapper))
         exp)
        (("%while")
         `(%begin
           ,exp
           ,(wrap-value! #f wrapper)))
        (("%try")
         (set! (second exp)
               (wrap-value! (second exp) wrapper))
         (set! (last exp)
               (wrap-value! (last exp) wrapper))
         exp)
        (else:
         (concatenate wrapper [exp])))
      (concatenate wrapper [exp])))


(define-function add-explicit-return (exp)
  (wrap-value! exp `(%return)))

;; after ANF: if value of binding is control-flow (%if, %while, etc.):
;; turn into statement form, then "sink" assignment

(define-function statement? (exp)
  (and (instance? exp <array>)
       (not (empty? exp))
       (member? (first exp)
                `(%if %while %begin %bind %try))))

(define-function add-explicit-true (exp)
  (if (instance? exp <boolean>)
      (true? exp)
      `((%native "$T") ,exp)))

(define-function transform-statements! (exp env)
  (if (instance? exp <array>)
      (select (symbol-name (first exp)) ==
        (("%method")
         (set! (last exp)
               (add-explicit-return
                (transform-statements! (last exp)
                                      env)))
         exp)
        (("%begin")
         (destructuring-bind (_ #rest exps) exp
           (maybe-begin
            (map (rcurry transform-statements! env)
                 exps))))
        (("%bind")
         (destructuring-bind (_ (var value) body) exp
           (if (statement? value)
               `(%bind (,var #f)
                  (%begin
                   ,(wrap-value!
                     (transform-statements! value env)
                     `(%set ,var))
                   ,(transform-statements! body env)))
               `(%bind (,var
                        ,(transform-statements! value env))
                  ,(transform-statements! body env)))))
        (("%if")
         (destructuring-bind (_ test then else) exp
           `(%if
             ;; TODO: only if not boolean
             ,(add-explicit-true test)
             ,(transform-statements! then env)
             ,(transform-statements! else env))))
        (("%while")
         (set! (second exp)
               (add-explicit-true (second exp)))
         (set! (third exp)
               (transform-statements! (third exp) env))
         exp)
        (("%try")
         (set! (second exp)
               (transform-statements! (second exp) exp))
         (set! (last exp)
               (transform-statements! (last exp) env))
         exp)
        (("%set")
         (destructuring-bind (_ identifier value) exp
           (bind ((value* (transform-statements! value env))
                  (definition-name
                    (get env "definition-names"
                         (symbol-name identifier))))
             ;; check if exported definition
             (if (and definition-name
                      (member? definition-name
                               (get env "module" "exports")))
                 (begin
                  (set! (first exp)
                        `%begin)
                  (set! (second exp)
                        `(%set ,identifier ,value*))
                  (set! (third exp)
                        `(%set (%get-property (%native "exports")
                                              ,definition-name)
                               ,identifier)))
                 ;; no re-export, leave as is
                 (set! (third exp) value*))))
         exp)
        (("%define")
         `(%var (,(last exp) #f)))
        (else:
         (map (rcurry transform-statements! env) exp)))
      exp))

