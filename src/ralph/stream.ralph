(define-module ralph/stream
  import: (ralph/core)
  export: (<stream>
           <string-stream>
           <file-stream>
           *standard-out*
           stream-close
           stream-open?
           stream-at-end?
           stream-peek
           stream-read
           stream-read-element
           stream-read-to-end
           stream-write
           stream-contents))

;;;; <stream>

(define-class <stream> (<object>))

(define-generic stream-close ((stream <stream>)))

(define-generic stream-open? ((stream <stream>)))

(define-generic stream-at-end? ((stream <stream>)))

(define-generic stream-peek ((stream <stream>)))

(define-generic stream-read ((stream <stream>) (n <number>)))

(define-generic stream-read-element ((stream <stream>)))

(define-generic stream-read-to-end ((stream <stream>)))

(define-generic stream-write ((stream <stream>) (string <string>)))

(define-generic stream-contents ((stream <stream>)))


;;;; <string-stream>

(define-class <string-stream> (<stream>)
  (string "")
  (index 0)
  (length 0))

(define-method initialize ((stream <string-stream>) #rest rest)
  (apply next-method stream rest)
  (set! (get stream "length")
        (size (get stream "string"))))

(define-method stream-at-end? ((stream <string-stream>))
  (== (get stream "index")
      (get stream "length")))

(define-method stream-peek ((stream <string-stream>))
  (element (get stream "string")
           (get stream "index")))

(define-method stream-read-element ((stream <string-stream>))
  (unless (stream-at-end? stream)
    (bind ((element (stream-peek stream)))
      (inc! (get stream "index"))
      element)))

(define-method stream-write ((stream <string-stream>) (string <string>))
  (bind-properties (index) stream
    (bind ((length (size string))
           (end (+ index length)))
      (set! (get stream "string")
            (replace-subsequence (get stream "string") string
                                 start: index
                                 end: end))
      (set! (get stream "length")
            (max end (get stream "length")))
      (inc! (get stream "index") length)))
  string)

(define-method stream-contents ((stream <string-stream>))
  (get stream "string"))

;;;; <file-stream>

(define-class <file-stream> (<stream>)
  file)

(define-method stream-write ((stream <file-stream>) (string <string>))
  ((js:get-property stream "file" "write") string))

(define *standard-out*
  (if (== *environment* "browser")
      (make <document-stream>)
      (bind ((object (if (== *environment* "commonjs")
                         (require "system")
                         process)))
        (make <file-stream>
              file: (js:get-property object "stdout")))))
