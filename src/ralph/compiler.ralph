(define-module ralph/compiler
  import: (ralph/core ralph/format ralph/regexp ralph/reader)
  export: (compile macroexpand transform-asynchronous))

(define S symbol)

(define *type-name->constructor-name*
  (make-object
   "<string>" "String"
   "<number>" "Number"
   "<boolean>" "Boolean"))

(define-function setter-name? (name)
  (and (instance? name <array>)
       (== (size name) 2)
       (== (first name) (S "setter"))))

(define-function source (form)
  (bind-properties (source start-index end-index)
      form
    (slice source start-index end-index)))

(define-function prepend-return (forms)
  (concatenate
   (but-last forms)
   [(bind ((tail (last forms)))
      (if (and tail
               (== (first tail)
                   (S "js:return")))
          (last forms)
          `(js:return ,tail)))]))

(define-function argument-names (arguments)
  (map (method (argument)
         (if (instance? argument <array>)
             (first argument)
             argument))
       arguments))

(define-function required-arguments (arguments)
  (bind ((length (size arguments)))
    (bind-methods ((position (hash-symbol)
                     (find-key arguments (curry = hash-symbol)
                               failure: length)))
      (slice arguments 0
             (apply min length
                    (map position [#key #rest]))))))

(define-function uses? (form symbol)
  (if (instance? form <array>)
      (any? (rcurry uses? symbol)
            form)
      (== form symbol)))

(define-function function-declaration (name arguments body)
  (bind-methods ((position (symbol)
                  (find-key arguments (curry = symbol))))
    (bind ((required (required-arguments arguments))
           (body (if (and (> (size body) 1)
                          (instance? (first body) <string>))
                     ;; strip documentation
                     (slice body 1)
                     body))
           (rest-position (position #rest))
           (key-position (position #key))
           (rest/key-code []))
      ;; key
      (when (or rest-position
                key-position)
        (bind ((rest-var (if rest-position
                             (element arguments
                                      (inc rest-position))
                             (generate-symbol))))
          (push-last rest/key-code
                     `(js:var ,rest-var
                              (as-array js:arguments
                                        ,(size required))))
          (when key-position
            ;; check #rest and #key are in order
            (when (and rest-position
                       (< key-position rest-position))
              (signal (make <error>
                            message: "#key should appear after #rest")))
            (destructuring-bind (key-var value-var index-var)
                (repeatedly generate-symbol 3)
              (bind ((setter-code `(select ,key-var js:==)))
                (for-each ((key (slice arguments (inc key-position))))
                          ()
                  (destructuring-bind (name default)
                      (if (instance? key <array>)
                          key
                          [key #f])
                    (push-last rest/key-code
                               `(js:var ,name ,default))
                    (push-last setter-code
                               `((,(keyword (symbol-name name)))
                                 (js:set ,name ,value-var)))))
                (push-last rest/key-code
                           `(js:for (((,index-var 0)
                                      (js:< ,index-var
                                            (js:get-property ,rest-var "length"))
                                      (js:+ ,index-var 2)))
                                    (js:var ,key-var
                                            (js:get-property ,rest-var ,index-var))
                                    (js:var ,value-var
                                            (js:get-property ,rest-var
                                                             (js:+ ,index-var 1)))
                                    (when (keyword? ,key-var)
                                      ,setter-code))))))))
      ;; function
      `(js:function ,(or name (S "js:null"))
                    ,(argument-names required)
                    ,(concatenate `(begin)
                                  rest/key-code
                                  ;; body
                                  (prepend-return body))))))

(define-function display-name (name arguments #key setter?)
  (concatenate
   "(" (if setter?
           (concatenate "(setter " (symbol-name name) ")")
           (symbol-name name))
   (bind ((specializers? #t))
       (join (map (method (argument)
                    (concatenate
                     " " (if specializers?
                             (if (or (== argument #key)
                                     (== argument #rest))
                                 (begin
                                  (set! specializers? #f)
                                  (concatenate "#" (symbol-name argument)))
                                 (if (instance? argument <array>)
                                     (symbol-name (second argument))
                                     "<object>"))
                             (symbol-name
                              (if (instance? argument <array>)
                                  (first argument)
                                  argument)))))
                  arguments)
             ""))
   ")"))

(define-function setter-symbol (symbol)
  (bind ((result (make <symbol> name:
                       (concatenate "_SET_" (escape-symbol symbol)))))
    (set! (get result "generated?") #t)
    result))

;; NB: don't use for loops!
(define-function request-temporaries (environment count)
  (bind-properties (temporaries post-processors) environment
    (when (empty? temporaries)
      (push post-processors
            (method (form)
              `((js:function js:null ,temporaries ,form)))))
    (when (< (size temporaries) count)
      (dotimes (_ (- count (size temporaries)))
        (push-last temporaries
                   (generate-symbol))))
    temporaries))

(define *macros*
    (make-object
     "define-macro"
     (method (environment name arguments #rest body)
       (bind ((compiled (compile
                         (concatenate
                          `(method ,(concatenate [(S "*environment*")]
                                                 arguments))
                          body))))
         (set! (get environment "macros" (symbol-name name))
               (eval (concatenate "(" compiled ")"))))
       #f)
     "%backquote"
     (method (_ form)
       (bind-methods ((transform (form)
                        (cond
                          ((and (instance? form <array>)
                                (not (empty? form)))
                           (if (== (first form)
                                   (S "%comma"))
                               (second form)
                               (concatenate `(make-array)
                                            (map transform
                                                 form))))
                          ((instance? form <symbol>)
                           `(symbol ,(symbol-name form)))
                          (else:
                           form))))
         (transform form)))
     "%comma"
     (method (_ value)
       (signal (make <error> message:
                     (format-to-string "comma not inside backquote: %d:%d"
                                       (get value "start-line")
                                       (get value "start-column")))))
     "%array"
     (method (_ #rest values)
       (concatenate `(js:array) values))
     "%parallel-set"
     (method (_ #rest clauses)
       (bind ((temp-clauses [])
              (set-clauses []))
         (if (> (size clauses) 2)
             (begin
              (for ((i 0 (+ i 2)))
                   ((>= i (size clauses)))
               (bind ((temp (generate-symbol)))
                  (push-last temp-clauses
                             `(js:var ,temp ,(element clauses (inc i))))
                  (push-last set-clauses
                             `(js:set ,(element clauses i) ,temp))))
              (concatenate `(begin)
                           temp-clauses
                           set-clauses))
             (concatenate `(js:set)
                          clauses))))
     "define"
     (method (environment name value)
       (bind ((escaped (if (instance? name <symbol>)
                           (escape-symbol name)
                           name))
              (inlined (if (instance? name <string>)
                        `(js:inline ,name)
                        name)))
           (bind-properties (definitions) environment
             (unless (member? inlined definitions)
               (push-last definitions inlined)))
           `(js:set ,inlined
                    ,(if (member? escaped (get environment "exports") test: =)
                         `(set! (js:get-property exports ,escaped)
                                ,value)
                         value))))
     "if"
     (method (_ test then else)
       `(js:if (true? ,test)
               ,then
               ,else))
     "when"
     (method (_ test #rest body)
       `(if ,test
            ,(concatenate `(begin) body)
            #f))
     "unless"
     (method (_ test #rest body)
       `(js:if (js:not (true? ,test))
               ,(concatenate `(begin) body)
               #f))
     "bind"
     (method (_ bindings #rest body)
       (bind ((vars (map first bindings)))
           (concatenate
            `((js:function js:null ,vars
                           ,(concatenate `(begin)
                                         (map (method (binding)
                                                (destructuring-bind (var value)
                                                    binding
                                                  `(js:set ,var ,value)))
                                              bindings)
                                         (prepend-return body))))
            (bind ((arguments (map (method (binding)
                                     (destructuring-bind (var value) binding
                                       (when (any? (rcurry uses? var)
                                                   (map second bindings))
                                         `(js:and (js:defined ,var) ,var))))
                                   bindings)))
              (if (every? not arguments)
                  []
                  arguments)))))
     "if-bind"
     (method (_ binding then else)
       (destructuring-bind (var value) binding
         (bind ((temp (generate-symbol)))
           `(bind ((,temp ,value))
              (if ,temp
                  (bind ((,var ,temp))
                    ,then)
                  ,else)))))
     "set!"
     (method (_ expression #rest value-rest)
       (if (instance? expression <array>)
           (cond
            ((== (first expression)
                 (S "js:get-property"))
             `(js:set ,expression
                      ,(first value-rest)))
            ((and (== (first expression)
                      (S "get"))
                  (== (size expression) 3))
             `(js:set ,(concatenate `(js:get-property)
                                    (rest expression))
                      ,(first value-rest)))
            (else:
             (concatenate `(,(setter-symbol (first expression)))
                          (rest expression)
                          value-rest)))
           `(js:set ,expression ,(first value-rest))))
     "get"
     (method (_ object #rest keys)
       (if (== (size keys) 1)
           `(%get-property ,object ,(first keys))
           (concatenate `(js:call get ,object)
                        keys)))
     "%get-property"
     (method (environment object name)
       (destructuring-bind (temp1 temp2)
           (request-temporaries environment 2)
         `(begin
           (set! ,temp1 ,object)
           (set! ,temp2 ,name)
           (js:and ,temp1
                   (has? ,temp1 ,temp2)
                   (js:get-property ,temp1 ,temp2)))))
     "while"
     (method (_ test #rest body)
       `((js:function js:null ()
           ,(concatenate
             `(begin)
             `(,(concatenate `(js:while (true? ,test))
                             body)
                (js:return #f))))))
     "until"
     (method (_ test #rest body)
       (concatenate `(while (not ,test))
                    body))
     "define-generic"
     (method (_ name arguments)
       `(define ,name
          (%make-generic (js:escape ,name)
                         ,(display-name name arguments))))
     "."
     (method  (_ value #rest calls)
       (reduce (method (value call)
                 (destructuring-bind (name #rest arguments) call
                   (concatenate
                    `((js:get-property ,value
                                       ,(select name instance?
                                          ((<string>)
                                           name)
                                          ((<symbol>)
                                           (symbol-name name))
                                          (else:
                                           (signal "DOT")))))
                    arguments)))
               value
               calls))
     "not"
     (method (_ value)
       `(js:not (true? ,value)))
     "true?"
     (method (_ value)
       (if (and (instance? value <array>)
                (any? (curry == (first value))
                      [(S "not") (S "js:not")]))
           value
           `(js:call true? ,value)))
     "and"
     (method (_ #rest expressions)
       (or (empty? expressions)
           `(js:if ,(concatenate `(js:and)
                                 (map (method (expression)
                                        `(true? ,expression))
                                      (but-last expressions)))
                   ,(last expressions)
                   #f)))
     "or"
     (method (environment #rest expressions)
       (destructuring-bind (temp)
           (request-temporaries environment 1)
         (bind-methods ((test (expressions)
                          (if (empty? expressions)
                              #f
                              `(begin
                                (set! ,temp ,(first expressions))
                                (js:if (true? ,temp)
                                       ,temp
                                       ,(test (rest expressions)))))))
           (test expressions))))
     "inc"
     (method (_ object)
       `(js:+ ,object 1))
     "dec"
     (method (_ object)
       `(js:- ,object 1))
     "dotimes"
     (method (environment binding #rest body)
       (bind ((temp (generate-symbol)))
         (destructuring-bind (var count result) binding
           (concatenate `(for ((,var 0 (js:+ ,var 1))
                               (,temp ,count ,temp))
                              ((js:>= ,var ,temp) ,(or result #f)))
                        body))))
     "for"
     (method (_ clauses end #rest body)
       (bind ((init-clauses [])
              (next-clauses []))
         (for-each ((clause clauses))
                   ()
           (push-last init-clauses
                      (slice clause 0 2))
           (push-last next-clauses
                      (first clause))
           (push-last next-clauses
                      (third clause)))
         `(bind ,init-clauses
            ,(concatenate `(js:while (not ,(first end)))
                          (bind ((vars (map first clauses)))
                              `(,(concatenate
                                  `(,(concatenate `(method ,vars)
                                                  body))
                                   vars)))
                          `(,(concatenate `(%parallel-set)
                                          next-clauses)))
            ,(if (empty? (rest end))
                 #f
                 (concatenate `(begin)
                              (rest end))))))
     "method"
     (method (_ arguments #rest body)
       (function-declaration (S "js:null")
                             arguments body))
     "cond"
     (method (_ #rest cases)
       (if (empty? cases)
           #f
           (destructuring-bind (test #rest then) (first cases)
             (bind ((then (concatenate `(begin) then)))
               (if (== test else:)
                   then
                   `(if ,test
                        ,then
                        ,(concatenate `(cond)
                                      (rest cases))))))))
     "select"
     (method (_ value test #rest cases)
       (bind ((value-var (generate-symbol))
              (infix? (and (instance? test <symbol>)
                           (has? *infix* (symbol-name test))))
              (test-var (if infix?
                            test
                            (generate-symbol))))
         (bind-methods ((test-expression (test-value)
                          `(,test-var ,value-var ,test-value)))
           `((js:function js:null ()
               ,(concatenate `(begin
                               (js:var ,value-var ,value))
                             (if infix? `() `((js:var ,test-var ,test)))
                             `((js:return
                                ,(concatenate
                                  `(cond)
                                  (map (method (case)
                                         (destructuring-bind (tests #rest then) case
                                           (if (== tests else:)
                                               case
                                               (concatenate
                                                `(,(concatenate
                                                    `(or)
                                                    (map test-expression tests)))
                                                then))))
                                       cases))))))))))
     "handler-case"
     (method (_ body #rest conditions)
       (bind ((condition-var (generate-symbol)))
         `((js:function js:null ()
             (begin
               (js:try
                (js:return ,body)
                ,condition-var
                ,(concatenate
                  `(cond)
                  (map (method (condition)
                         (destructuring-bind ((type #rest arguments) #rest body)
                             condition
                           (concatenate `((instance? ,condition-var ,type))
                                        (destructuring-bind (#key condition)
                                            arguments
                                          (if condition
                                              `((js:var ,condition ,condition-var))
                                              `()))
                                        (prepend-return body))))
                       conditions))))))))
     "define-class"
     (method (_ class superclass #rest slots)
       `(define ,class
            (%make-class
             (js:escape ,class)
             ,(first superclass)
             ,(bind ((object `(make-object)))
                (for-each ((slot slots))
                          ()
                  (if (instance? slot <array>)
                      (begin
                       (push-last object (symbol-name (first slot)))
                       (push-last object `(method ()
                                            ,(second slot))))
                      (begin
                       (push-last object (symbol-name slot))
                       (push-last object #f))))
                object))))
     "define-module"
     (method (environment name #key (import []) (export []))
       (set! (get environment "exports")
             (map (method (name)
                    (cond
                     ((instance? name <symbol>)
                      (escape-symbol name))
                     ((setter-name? name)
                      (escape-symbol (setter-symbol (second name))))
                     (else: name)))
                  export))
       (concatenate
        `(begin
          (js:var *module* js:this))
         (if (get environment "asynchronous?")
             (begin
              (push (get environment "post-processors")
                    (bind ((module-name (symbol-name name)))
                      (method (form)
                        `(begin
                          (js:comment ,(concatenate "@ sourceURL=" module-name))
                          ((js:inline "parent.define") ,module-name
                           ,(concatenate `(js:array)
                                         (map symbol-name import))
                           (js:function js:null (exports) ,form))))))
              `())
             (bind ((property (generate-symbol))
                    (module (generate-symbol))
                    (i (generate-symbol))
                    (modules (generate-symbol)))
               (concatenate
                (if (empty? import)
                    `()
                    `((js:var ,modules ,(concatenate `(js:array)
                                                     (map symbol-name import)))
                      (js:for (((,i 0)
                                (js:< ,i ,(size import))
                                (js:+ ,i 1)))
                        (js:var ,module (require (js:get-property ,modules ,i)))
                        (js:for-in (,property ,module)
                          (js:if ((js:get-property ,module "hasOwnProperty") ,property)
                                 (js:set (js:get-property *module* ,property)
                                         (js:get-property ,module ,property))))))))))))
     "block"
     (method (_ argument #rest body)
        (destructuring-bind ((name)) argument
          (if name
              (bind ((condition (generate-symbol)))
                `(js:try
                  (js:return
                   ,(concatenate `(bind ((,name (%make-non-local-exit-function
                                                 ,(symbol-name name)))))
                                 body))
                  ,condition
                  (if (and (%non-local-exit? ,condition)
                           (js:=== (js:get-property ,condition "name")
                                   ,(symbol-name name)))
                      (js:return (js:get-property ,condition "value"))
                      (js:throw ,condition))))
              (concatenate `(begin) body))))
     "for-each"
     (method (_ clauses end #rest body)
       (if (and (== (size clauses) 1)
                (empty? end))
           (destructuring-bind (item x) (first clauses)
             (bind ((index (generate-symbol))
                    (array (generate-symbol))
                    (length (generate-symbol)))
               `(bind ((,array ,x)
                       (,length (size ,array)))
                    ,(concatenate `(js:for (((,index 0)
                                             (js:< ,index ,length)
                                             (js:+ ,index 1)))
                                           (js:var ,item (js:get-property ,array ,index)))
                                  `(((js:function js:null (,item)
                                       ,(concatenate `(begin)
                                                     body))
                                     ,item))))))
           (bind ((temporaries (map (method (clause)
                                      (concatenate [(generate-symbol)]
                                                   clause))
                                    clauses)))
            `((js:function js:null ()
                ,(concatenate `(begin)
                              (map (method (clause)
                                     `(js:var ,(first clause)))
                                   clauses)
                              (map (method (temporary)
                                     `(js:var ,(first temporary)
                                              ,(third temporary)))
                                   temporaries)
                              `(,(concatenate
                                  `(js:while #t
                                     (js:if (any? empty? ,(concatenate `(js:array)
                                                                       (map first temporaries)))
                                            (js:return #f)))
                                  (map (method (temporary)
                                         `(set! ,(second temporary)
                                                (first ,(first temporary))))
                                       temporaries)
                                  (bind ((vars (map first clauses))
                                         (real-body (unless (empty? body)
                                                      (concatenate `((js:function js:null ,vars
                                                                       ,(concatenate `(begin)
                                                                                     body)))
                                                                   vars))))
                                    (if (empty? end)
                                        `(,real-body)
                                        `((js:if ,(first end)
                                                 (js:return
                                                   ,(if (empty? (rest end))
                                                        #f
                                                        (concatenate `(begin)
                                                                     (rest end))))
                                                 ,real-body))))
                                  (map (method (temporary)
                                         `(set! ,(first temporary)
                                                (rest ,(first temporary))))
                                       temporaries)))))))))
     "bind-methods"
     (method (_ bindings #rest body)
        (concatenate `(bind
                       ,(map (method (binding)
                               (destructuring-bind (name arguments #rest body)
                                   binding
                               `(,name ,(function-declaration
                                         name arguments body))))
                             bindings))
                     body))
     "destructuring-bind"
     (method (_ pattern value #rest body)
       (bind ((target))
         (bind-methods ((destructure (pattern value)
                          (bind ((nested [])
                                 (inner
                                  `(method ,(map (method (var)
                                                   (if (instance? var <array>)
                                                       (bind ((temp (generate-symbol)))
                                                         (push-last nested
                                                                    `(,var ,temp))
                                                         temp)
                                                       var))
                                                 pattern)))
                                 (wrapper `(apply ,inner ,value)))
                            (set! target inner)
                            (for-each ((n nested))
                                      ()
                              (bind ((sub-wrapper (apply destructure n)))
                                (push-last inner sub-wrapper)
                                (set! inner (second sub-wrapper))))
                            wrapper)))
         (bind ((wrapping (destructure pattern value)))
           (replace-subsequence! target body start: (size target))
           wrapping))))
     "bind-properties"
     (method (_ properties object #rest body)
       (bind ((object* (generate-symbol)))
         `((js:function js:null (,object*)
            ,(concatenate `(begin)
                          (map (method (property)
                                 `(js:var ,property
                                          (js:get-property ,object*
                                                           ,(symbol-name property))))
                               properties)
                          (prepend-return body)))
           ,object)))
     "call-next-method"
     (method (_)
       `((js:get-property next-method "apply") js:null js:arguments))
     ;; optimizations / "inlining"
     "instance?"
     (method (_ object type)
       (select type ==
         (((S "<array>"))
          `((js:inline "Array.isArray") ,object))
         ;; (((S "<string>")
         ;;   (S "<number>")
         ;;   (S "<boolean>"))
         ;;  `(js:=== (js:get-property ,object "constructor")
         ;;           (js:inline ,(get *type-name->constructor-name*
         ;;                            (symbol-name type)))))
         (((S "<error>"))
          `(js:instanceof ,object (js:inline "Error")))
         (else:
          `(js:call instance? ,object ,type))))
     "make-array"
     (method (_ #rest elements)
       (concatenate `(js:array)
                    elements))
     "first"
     (method (environment expression)
       `(js:get-property ,expression 0))
     "second"
     (method (environment expression)
       `(js:get-property ,expression 1))
     "third"
     (method (environment expression)
       `(js:get-property ,expression 2))
     "slice"
     (method (_ array start end)
       (concatenate `((js:get-property ,array "slice"))
                    (if start `(,start) `())
                    (if end `(,end) `())))
     "rest"
     (method (_ array)
       `(slice ,array 1))
     "as-array"
     (method (_ arguments skip)
       `((js:get-property [] "slice" "call")
         ,arguments ,(js:or skip 0)))
     "size"
     (method (environment object)
       (destructuring-bind (temp)
           (request-temporaries environment 1)
         `(begin
           (set! ,temp ,object)
           (js:or (js:and (true? ,temp)
                          (js:get-property ,temp "length"))
                  0))))
     "has?"
     (method (_ object property)
       `((js:inline "Object.hasOwnProperty.call")
         ,object
         ,property))
     "but-last"
     (method (_ array n)
       (bind ((n (or n 1)))
         `(slice ,array 0 ,(if (instance? n <number>)
                               (* n -1)
                               `(js:* ,n -1)))))
     "push-last"
     (method (environment array value)
       (if (instance? array <symbol>)
           `(begin
             ((js:get-property ,array "push") ,value)
             ,array)
           (destructuring-bind (temp)
               (request-temporaries environment 1)
             `(begin
               (set! ,temp ,array)
               ((js:get-property ,temp "push") ,value)
               ,temp))))
     "push"
     (method (environment array value)
       (if (instance? array <symbol>)
           `(begin
             ((js:get-property ,array "unshift") ,value)
             ,array)
           (destructuring-bind (temp)
               (request-temporaries environment 1)
             `(begin
               (set! ,temp ,array)
               ((js:get-property ,temp "unshift") ,value)
               ,temp))))
     "pop"
     (method (_ array)
       `((js:get-property ,array "shift")))
     "pop-last"
     (method (_ array)
       `((js:get-property ,array "pop")))
     "reverse!"
     (method (_ array)
       `((js:get-property ,array "reverse")))
     "as-string"
     (method (_ object)
       `((js:get-property ,object "toString")))
     "as-number"
     (method (_ object)
       `((js:inline "Number") ,object))
     "%concat"
     (method (_ array1 array2)
       `((js:get-property ,array1 "concat") ,array2))
     "concatenate"
     (method (_ object #rest rest)
       (concatenate (if (instance? object <string>)
                        `(js:+ ,object)
                        `(js:call concatenate ,object))
                    rest))
     "=="
     (method (_ #rest arguments)
       (concatenate
        (if (== (size arguments) 2)
            `(js:===)
            `(js:call ==))
        arguments))))

(define-function function-definer (macro-name definer-name #key type?)
  (method (_ function-name arguments #rest body)
    (destructuring-bind (setter? name)
        (if (setter-name? function-name)
            [#t (setter-symbol (second function-name))]
            [#f function-name])
      (when (not (or (instance? name <symbol>)
                     setter?))
        (signal (make <error> message:
                      (concatenate macro-name ": name => symbol or (setter name)"))))
      `(define ,name
           ,(concatenate
             `(,(S definer-name)
                (js:escape ,name)
                ,(function-declaration
                  `(js:inline "__method__")
                  arguments body))
             (if type?
                 `((js:inline ,(if (empty? arguments)
                                   "null"
                                   (bind ((head (first arguments)))
                                         (if (and (instance? head <array>)
                                                  (> (size head) 1))
                                             (escape-symbol (second head))
                                             "Object")))))
                 `())
             `((js:and (js:defined ,name) ,name)
               ,setter?
               ,(display-name (if setter?
                                  (second function-name)
                                  function-name)
                              arguments setter?: setter?)))))))

(for-each ((arguments [["define-function" "%make-function"]
                       ["define-method" "%make-method" type?: #t]]))
          ()
  (set! (get *macros* (first arguments))
        (apply function-definer arguments)))


(for-each ((comparison ["=" "<" ">" "<=" ">="]))
          ()
  (set! (get *macros* comparison)
        (method (_ #rest arguments)
          (concatenate
           (if (== (size arguments) 2)
               `(,(S (concatenate "binary" comparison)))
               `(js:call ,(S comparison)))
           arguments))))

(for-each ((op ["-" "+" "*" "/"]))
          ()
  (set! (get *macros* op)
        (method (_ #rest arguments)
          (concatenate
           `(,(S (concatenate "js:" op)))
           arguments))))


(for-each ((name/op  [["inc!" "+"]
                      ["dec!" "-"]]))
          ()
  (destructuring-bind (name op) name/op
    (set! (get *macros* name)
          (method (_ object value)
            (if (or (not (instance? object <array>))
                    (and (instance? object <array>)
                         (or (== (first object)
                                 (S "js:get-property"))
                             (and (== (first object)
                                      (S "get"))
                                  (== (size object) 3)))))
                `(,(S (concatenate "js:" op "="))
                   ,(if (and (instance? object <array>)
                             (== (first object)
                                 (S "get")))
                        (concatenate `(js:get-property)
                                     (rest object))
                        object)
                   ,(or value 1))
                `(set! ,object
                       (,(S (concatenate "js:" op))
                         ,object ,(or value 1))))))))


(define *symbol-macros*
  (make-object
   "this-method" (method (_)
                   `(js:inline "__method__"))
   "next-method" (method (_)
                   `(%next-method this-method))))

(define *special-forms*
    (make-object
     "js:new" 1
     "js:var" 1
     "js:for-in" 1
     "js:function" 2
     "js:escape" #f
     "js:inline" #f
     "js:for"
     (method (environment clauses #rest body)
       (concatenate
        `(js:for
          ,(map (method (clause)
                  (destructuring-bind ((var value) #rest rest) clause
                    (concatenate
                     [[var (macroexpand environment value)]]
                     (map (curry macroexpand environment)
                          rest))))
                clauses))
        (macroexpand environment body)))
     "js:try"
     (method (environment body var catch finally)
       `(js:try
         ,(macroexpand environment body)
         ,var
         ,(macroexpand environment catch)
         ,(macroexpand environment finally)))))

(define *unary*
    (make-object
     "js:-" "-"))

(define *infix*
    (make-object
     "js:and" "&&"
     "js:or" "||"
     "js:+" "+"
     "js:+=" "+="
     "js:-" "-"
     "js:-=" "-="
     "js:*" "*"
     "js:/" "/"
     "js:%" "%"
     "js:>" ">"
     "js:<" "<"
     "js:>=" ">="
     "js:<=" "<="
     "js:==" "=="
     "js:===" "==="
     "js:instanceof" "instanceof"
     "js:&" "&"
     "js:|" "|"))

(define *symbols*
    (make-object
     "js:null" "null"
     "js:this" "this"
     "js:undefined" "undefined"
     "js:arguments" "arguments"
     "js:typeof" "typeof"))

(define *symbol-escapes*
    (make-object
     "-" "_M_"
     "+" "_PL_"
     "!" "_B_"
     "?" "_W_"
     "%" "_PE_"
     "#" "_H_"
     "@" "_A_"
     "*" "_ST_"
     "/" "_SL_"
     "=" "_E_"
     ":" "_C_"
     "<" "_LT_"
     ">" "_GT_"
     "_" "__"
     "[" "_SO_"
     "]" "_SC_"
     "{" "_BO_"
     "}" "_BC_"))

(define *reserved*
    (make-array
     "break" "case" "catch" "continue" "default" "delete" "do" "else"
     "finally" "for" "function" "if" "in" "instanceof" "new" "return"
     "switch" "this" "throw" "try" "typeof" "var" "void" "while"
     "with" "abstract" "boolean" "byte" "char" "class" "const"
     "debugger" "double" "enum" "export" "extends" "final" "float"
     "goto" "implements" "import" "int" "interface" "long" "native"
     "package" "private" "protected" "public" "short" "static" "super"
     "synchronized" "throws" "transient" "volatile" "null" "true" "false"
     "arguments" "object" "number" "string" "array"))

(define *symbol-count* 0)

(define-function generate-symbol ()
  (bind ((symbol (make <symbol> name:
                       (concatenate "_" (as-string *symbol-count*)))))
    (inc! *symbol-count*)
    (set! (get symbol "generated?") #t)
    symbol))

(define *hyphen-pattern*
    (make <regexp>
          pattern: "-(.)"
          global?: #t))

(define-function escape (name)
  ;; TODO: revert back to using regexp when
  ;; https://bugzilla.mozilla.org/show_bug.cgi?id=634948
  ;; is fixed
  ;;
  ;; (join (map (method (char)
  ;;                (if-bind (replacement (get *symbol-escapes* char))
  ;;                  replacement
  ;;                  char))
  ;;              (as-array replaced))
  ;;         "")
  (if (= name "-")
      (get *symbol-escapes* name)
      (bind ((upcase? #f)
             (result ""))
        (for-each ((char (as-array name)))
                  ()
          (if (= char "-")
              (set! upcase? #t)
              (bind ((char (if upcase?
                               (as-uppercase char)
                               char)))
                (inc! result
                      (if-bind (replacement (get *symbol-escapes* char))
                               replacement
                               char))
                (set! upcase? #f))))
        result)))

(define-function escape-symbol (symbol)
  (bind ((name (symbol-name symbol)))
    (cond
      ((get symbol "generated?")
       name)
      ((member? name *reserved*)
       (concatenate "_" name))
      ((and (= (first name) "<")
            (= (last name) ">")
            (> (size name) 2))
       (concatenate "_CL_"
                    (escape (but-last (rest name)))))
      ((and (= (first name) "*")
            (= (last name) "*")
            (> (size name) 2))
       (as-uppercase
        (escape (but-last (rest name)))))
      (else:
       (escape name)))))

(define-function wrap-block (code)
  (concatenate
   "(function(){\n" code "\n})()"))

(define-function write-body (body)
  (write-statements
   (concatenate `(begin) body)))

(define *property-pattern*
    (make <regexp>
          pattern: "^[a-z_]+[a-z0-9]*$"
          ignore-case?: #t))

(define *writers*
  (make-object
   "js:call"
   (method (_ head #rest tail)
     (concatenate
      ;; anonymous function call?
      (if (and (instance? head <array>)
               (instance? (first head) <symbol>)
               (== (first head)
                   (S "js:function")))
          (concatenate "(" (write-expressions head) ")")
          (write-expressions head))
      "(" (join (map write-form tail) ", ") ")"))
     "js:negative"
     (method (_ object)
       (concatenate
        "(- " (write-expressions object) ")"))
     "js:not"
     (method (_ expression)
       (concatenate
        "!" (write-expressions expression)))
     "begin"
     (method (statements? #rest forms)
       (cond
        (statements?
         (if (> (size forms) 1)
             (join (concatenate
                    (map (method (form)
                           (concatenate
                            (write-statements form)
                            (if (and (instance? form <array>)
                                     (== (first form)
                                         (S "js:comment")))
                                ""
                                ";")))
                         (but-last forms))
                    (write-statements (last forms)))
                   "\n")
             (write-statements (first forms))))
        ((> (size forms) 1)
         (concatenate
          "(" (join (map write-form forms) ", ") ")"))
        (else:
         (write-expressions (first forms)))))
     "js:if"
     (method (statements? test then else)
       (if statements?
           (concatenate
            "if (" (write-expressions test) ") {\n"
            (write-statements then)
            "\n}"
            (if else
                (concatenate
                 " else {\n" (write-statements else) "\n}")
                ""))
           (concatenate
            "(" (write-expressions test)
            " ? " (write-expressions then)
            " : " (write-expressions else)
            ")")))
     "js:array"
     (method (_ #rest elements)
       (concatenate
        "[" (join (map write-form elements) ", ") "]"))
     "js:defined"
     (method (_ expression)
       (concatenate
        "(typeof (" (write-expressions expression) ") !== 'undefined')"))
     "js:delete"
     (method (_ expression)
       (concatenate "(delete (" (write-expressions expression) "))"))
     "js:try"
     (method (statements? body condition catch finally)
       (bind ((result
               (concatenate
                "try {\n"
                (write-statements body)
                "\n} catch (" (write-expressions condition) ") {\n"
                (if catch
                    (write-statements catch)
                    "")
                "\n}"
                (if finally
                    (concatenate
                     " finally {\n"
                     (write-statements finally)
                     "\n}")
                  ""))))
         (if statements?
             result
             (wrap-block result))))
     "js:for-in"
     (method (statements? variable/expression #rest body)
        (destructuring-bind (variable expression) variable/expression
          (bind ((result
                  (concatenate
                   "for (var " (write-expressions variable)
                   " in " (write-expressions expression) ") {\n"
                   (write-body body) "\n}")))
            (if statements?
                result
                (wrap-block result)))))
     "js:for"
     (method (statements? clauses #rest body)
       (bind ((inits [])
              (tests [])
              (nexts []))
         (do (method (clause)
               (destructuring-bind ((var value) test next) clause
                 (bind ((set (S "js:set")))
                   (push-last inits (write-expressions [set var value]))
                   (push-last tests (write-expressions test))
                   (push-last nexts (write-expressions [set var next])))))
             clauses)
         (bind ((result
                 (concatenate
                  "for (var "
                  (join (map (method (parts)
                               (join parts ", "))
                             [inits tests nexts])
                        "; ")
                  ") {\n" (write-body body) "\n}")))
         (if statements?
             result
             (wrap-block result)))))
     "js:while"
     (method (statements? test #rest body)
       (bind ((result
               (concatenate
                "while (" (write-expressions test) ") {\n"
                (write-body body) "\n}")))
         (if statements?
             result
             (wrap-block result))))
     "js:inline"
     (method (_ identifier)
       (as-string identifier))
     "js:get-property"
     (method (_ object #rest elements)
       (concatenate
        (if (instance? object <number>)
            (concatenate "(" (write-expressions object) ")")
            (write-expressions object))
        (apply concatenate
               (map (method (element)
                      (if (and (instance? element <string>)
                               (match *property-pattern* element)
                               (not (member? element *reserved*)))
                          (concatenate "." element)
                          (concatenate "[" (write-expressions element) "]")))
                    elements))))
     "js:new"
     (method (_ name #rest arguments)
       (concatenate
        "new " (write-expressions name)
        " (" (join (map write-form arguments) ", ") ")"))
     "js:var"
     (method (_ name value)
       (concatenate
        "var " (write-expressions name)
        (if (and value
                 (not (== value (S "js:undefined"))))
            (concatenate " = " (write-expressions value))
            "")))
     "js:set"
     (method (_ name value)
       (concatenate
        (write-expressions name) " = "
        (write-expressions value)))
     "js:return"
     (method (_ body)
       (concatenate
        "return " (write-expressions body)))
     "js:function"
     (method (_ name arguments body)
       (concatenate
        "function "
        (if (and name
                 (not (== name (S "js:null"))))
            (if (instance? name <array>)
                (write-expressions name)
                (escape-symbol name))
            (concatenate (escape-symbol (generate-symbol))
                         "__lambda"))
        " (" (join (map write-form arguments) ", ") ") {"
        (if body
            (concatenate "\n" (write-statements body) "\n")
            "")
        "}"))
     "js:escape"
     (method (_ symbol)
       (write-expressions (escape-symbol symbol)))
     "js:throw"
     (method (statements? error)
       (bind ((result (concatenate "throw " (write-expressions error))))
             (if statements?
                 result
                 (wrap-block result))))
     "js:comment"
     (method (_ comment)
       (if (position comment "\n")
           (concatenate "/*" comment "*/")
           (concatenate "//" comment)))
     "make-object"
     (method (_ #rest key-values)
       (bind ((entries []))
         (for ((i 0 (+ i 2)))
              ((>= i (size key-values)))
           (push-last entries
                      (concatenate
                       (write-expressions (element key-values i)) ":"
                       (write-expressions (element key-values (+ i 1))))))
         (concatenate "{" (join entries ",\n") "}")))))

(define-function compile (form #key statements? asynchronous?)
  (bind ((post-processors [])
         (temporaries [])
         (environment (make-object
                       "definitions" []
                       "macros" (make-object)
                       "temporaries" temporaries
                       "post-processors" post-processors
                       "asynchronous?" asynchronous?))
         (expanded (macroexpand environment form)))
    (unless (empty? post-processors)
      (for-each ((processor post-processors))
                ()
        (set! expanded (processor expanded))))
    (write-form expanded statements?)))



(define *escaped*
  (make-object
   "\"" "\""
   "\\" "\\"
   "\b" "b"
   "\f" "f"
   "\n" "n"
   "\r" "r"
   "\v" "v"
   "\t" "t"))

(define-function fill-zeros (string)
  (concatenate
   (slice "0000" 0 (- 4 (size string)))
   string))

(define-function hex (code)
  (fill-zeros ((js:get-property code "toString") 16)))

(define-function escape-string (string)
  (join (map (method (char)
               (if-bind (escaped (get *escaped* char))
                 (concatenate "\\" escaped)
                 (bind ((code (char-code char)))
                   (if (< 0x1f code  0x7f)
                       char
                       (concatenate "\\u" (hex code))))))
             (as-array string))
        ""))

(define-function macroexpand (environment form)
  (select form instance?
    ((<array>)
     ;; apply macros
     (while (and (instance? form <array>)
                 (instance? (first form) <symbol>)
                 (or (has? *macros* (symbol-name (first form)))
                     (has? (get environment "macros")
                           (symbol-name (first form)))))
       (bind ((macro (or (get *macros* (symbol-name (first form)))
                         (get environment "macros"
                              (symbol-name (first form))))))
         (set! form (apply macro environment (rest form)))))
     ;; still array?
     (if (instance? form <array>)
         (bind ((head (first form)))
           ;; special?
           (if (and (instance? head <symbol>)
                    (has? *special-forms*
                          (symbol-name head)))
               (bind ((expander (get *special-forms*
                                     (symbol-name head))))
                 (select expander instance?
                   ((<number>)
                    (concatenate
                     ;; skip n arguments, macroexpand rest
                     (slice form 0 (inc expander))
                     (map (curry macroexpand environment)
                          (slice form (inc expander)))))
                   ((<function>)
                    ;; custom expander
                    (apply expander environment
                           (rest form)))
                   (else:
                    ;; form mustn't be expanded
                    form)))
               ;; not special
               (map (curry macroexpand environment)
                    form)))
         ;; not an array
         (macroexpand environment form)))
    ((<symbol>)
     ;; symbol-macro?
     (if-bind (symbol-macro (get *symbol-macros*
                                 (symbol-name form)))
       (macroexpand environment
                    (apply symbol-macro environment))
       form))
    (else: form)))

(define-function write-form (form statements?)
  (select form instance?
    ;; array?
    ((<array>)
     (bind ((head (first form))
            (head-name (and head
                            (symbol-name head)))
            (tail (rest form)))
       (cond
         ;; unary?
         ((and (instance? head <symbol>)
               (has? *unary* head-name)
               (== (size form) 2))
          (concatenate "(" (get *unary* head-name) " "
                       (write-expressions (second form)) ")"))
         ;; infix?
         ((and (instance? head <symbol>)
               (has? *infix* head-name))
          (bind ((infix (get *infix* head-name))
                 (inside (join (map write-form tail)
                               (concatenate " " infix " "))))
              (concatenate "(" inside ")")))
         ;; writer?
         ((and (instance? head <symbol>)
               (has? *writers* head-name))
          (apply (get *writers* head-name)
                 statements?
                 tail))
         (head
          (apply (get *writers* "js:call")
                 statements? head tail))
         (else:
          "[]"))))
    ((<symbol>)
     (if-bind (symbol (get *symbols* (symbol-name form)))
       symbol
       (escape-symbol form)))
    ((<hash-symbol>)
     (concatenate "_" (symbol-name form)))
    ((<keyword>)
     (concatenate "_k('" (symbol-name form) "')"))
    ((<boolean>)
     (if form "true" "false"))
    ((<string>)
     (concatenate "\"" (escape-string form) "\""))
    ((<number>)
     (as-string form))
    (else:
     (description form))))

(define write-statements
    (rcurry write-form #t))

(define write-expressions
    (rcurry write-form #f))
