(define-module ralph/test
  import: (ralph/core ralph/format)
  export: (check-equal
           check-true
           check-false
           check-condition
           check-no-error
           check-instance?))

(define-function report-success ((description <string>) (explanation <string>))
  (format-out (if (== *environment* "browser")
                  " <span style=\"color:green\">✓</span> %s: %s<br/>"
                  " \u001B[32m✓\u001B[0m %s: %s\n")
              description explanation))


(define-function report-failure ((description <string>) (explanation <string>))
  (format-out (if (== *environment* "browser")
                  " <span style=\"color:red\">✘</span> %s: %s<br/>"
                  " \u001B[31m✘\u001B[0m %s: %s\n")
              description explanation))

(define-function check-equal ((description <string>) expected-value test-value)
  (if (= expected-value test-value)
      (report-success description
                      (format-to-string "Values are equal: %=, %="
                                        expected-value test-value))
      (report-failure description
                      (format-to-string "Values should be equal: %=, %="
                                        expected-value test-value))))

(define-function check-unequal ((description <string>)
                                expected-value test-value)
  (if (not (= expected-value test-value))
      (report-success description
                      (format-to-string "Values aren't equal: %=, %="
                                        expected-value test-value))
      (report-failure description
                      (format-to-string "Values shouldn't be equal: %=, %="
                                        expected-value test-value))))


(define-function check-true ((description <string>) expression)
  (if expression
      (report-success description
                      (format-to-string "Expression is true: %="
                                        expression))
      (report-failure description
                      (format-to-string "Expression should be true: %="
                                        expression))))


(define-function check-false ((description <string>) expression)
  (if (not expression)
      (report-success description
                      (format-to-string "Expression is false: %="
                                        expression))
      (report-failure description
                      (format-to-string "Expression should be false: %="
                                        expression))))


(define-function check-condition ((description <string>)
                                  (condition-class <class>)
                                  (function <function>))
  (handler-case
      (begin
       (function)
       (report-failure description
                       (format-to-string
                        "Condition %= should have been signaled."
                        condition-class)))
    ((condition-class)
        (report-success description
         (format-to-string "Condition %= was signaled."
                           condition-class)))))


(define-function check-no-error ((description <string>) (function <function>))
  (handler-case
      (begin
       (function)
       (report-success description "No error was signaled."))
    ((<error> condition: condition)
        (report-failure description
         (format-to-string "Condition %= shouldn't have been signaled."
                           condition)))))


(define-function check-instance? ((description <string>)
                                  (value-type <class>) value)
  (if (instance? value value-type)
      (report-success description
                      (format-to-string "Value is of instance %=: %="
                                        value-type value))
      (report-failure description
                      (format-to-string "Value should be of instance %=: %="
                                        value-type value))))
