(define-module ralph/reader
    import: (ralph/stream ralph/regexp)
    export: (read))

(define *number-patterns*
  (map (curry make <regexp> ignore-case?: #t pattern:)
       ["^[+-]?0x[0-9a-f]+"
        "^[+-]?0[0-7]+"
        "^[+-]?\\d+\\.?\\d*(?:e-?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?"]))

(define *line-pattern*
  (make <regexp> pattern: "(.*)[\n\r]?"))

(define *whitespace-subpattern*
  ;; Vertical Tab, Form Feed, No-break space, Byte Order Mark
  "\t\n\r\u000B\u000C\u00A0\uFEFF ")

(define *whitespace-pattern*
  (make <regexp> pattern:
        (concatenate "[" *whitespace-subpattern* "]*")))

(define *atom-pattern*
  (make <regexp> pattern:
        (concatenate "[^\\[\\]();`," *whitespace-subpattern* "]+")))

(define-function match-stream ((regexp <regexp>) (stream <stream>))
  (if-bind (result (match regexp (stream-remaining-contents stream)))
    (begin
     (stream-read stream (size (first result)))
     result)))

(define-function read-line ((stream <stream>))
  (match-stream *line-pattern* stream))

(define-function read-whitespace ((stream <stream>))
  (match-stream *whitespace-pattern* stream))


(define-function make-atom (value)
  (select value ==
    (("#t") #t)
    (("#f") #f)
    (("#key") #key)
    (("#rest") #rest)
    (else:
     (if-bind (number (any? (rcurry match value)
                            *number-patterns*))
       (as-number (first number))
       (if (== (last value) ":")
           (keyword (but-last value))
           (symbol value))))))

(define-function read-string ((stream <stream>))
  (bind ((result (make <string-stream>))
         (char (stream-read-element stream)))
    (while (not (== char "\""))
      (when (stream-at-end? stream)
        (signal "missing end of string"))
      (stream-write result
                    (if (== char "\\")
                        (select (stream-read-element stream) ==
                          (("\"") "\"")
                          (("\\") "\\")
                          (("b") "\b")
                          (("f") "\f")
                          (("n") "\n")
                          (("r") "\r")
                          (("t") "\t")
                          (("v") "\v")
                          (("u")
                           (code-char
                            (parse-integer (stream-read stream 4)
                                           radix: 16)))
                          (else:
                           (signal "bad escape sequence")))
                        char))
      (set! char (stream-read-element stream)))
    (stream-contents result)))

(define *wrapper-symbols* ["%backquote" "%comma"])

(define-function read ((stream <stream>) #key (eof-error? #t) eof-value)
  (bind ((stack [[]])
         (ends []))
    (bind-methods ((add-to-stack! (value)
                     (push-last (last stack)
                                value)
                     (when (member? (symbol-name (first (last stack)))
                                    *wrapper-symbols*)
                       (add-last!)))
                   (add-last! ()
                     (bind ((value (pop-last stack)))
                       (add-to-stack! value))))
      (while (not (stream-at-end? stream))
        (read-whitespace stream)
        (bind ((char (stream-read-element stream)))
          (select char ==
            ((";")
             (read-line stream))
            (("`")
             (push-last stack [(symbol "%backquote" "ralph/core")]))
            ((",")
             (push-last stack [(symbol "%comma" "ralph/core")]))
            (("(")
             (push-last ends ")")
             (push-last stack []))
            (("[")
             (push-last ends "]")
             (push-last stack `(%array)))
            (((last ends))
             (pop-last ends)
             (add-last!))
            ((")" "]")
             (signal (format-to-string "too many closings: %=" char)))
            (("\"")
             (add-to-stack! (read-string stream)))
            (else:
             (stream-unread-element stream)
             (add-to-stack!
              (make-atom (first (match-stream *atom-pattern* stream)))))))
        (read-whitespace stream))
      (if (empty? ends)
          (bind ((value (first (last stack))))
            (or value
                (if eof-error?
                    (signal "no object")
                    eof-value)))
          (signal (format-to-string "missing closings: %=" ends))))))