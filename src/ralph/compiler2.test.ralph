
(define-module ralph/compiler2.test
  import: (ralph/test
           ralph/reader
           ralph/compiler2
           ralph/compiler2/module
           ralph/compiler2/environment
           ralph/compiler2/macroexpansion
           ralph/compiler2/macros
           ralph/compiler2/special-forms
           ralph/compiler2/alpha
           ralph/stream
           ralph/format
           ralph/compiler2/reader))

(define-function make-environment ()
  (bind ((module (make <module> name: "ralph/compiler2.test")))
    ;; (import-module module "ralph/core")

    (bind ((symbol-macros
            (make-plain-object)))
      (set! (get symbol-macros "foo")
            (method (_)
              `(when 23 42)))
      (chain-object symbol-macros
                    $core-symbol-macros)
      (make <environment>
            module: module
            special-forms: $all-special-forms
            macros: $core-macros
            symbol-macros: symbol-macros))))

(define *environment*
  (make-environment))


(set! (get *environment* "special-forms")
      $internal-special-forms)
(chain-object (get *environment* "macros")
              $internal-macros)



(define-function compile-expression (exp env)
  (reset-symbol-counter!)
  (reduce (method (result name/pass)
            (destructuring-bind (name pass) name/pass
              (format-out "\n### %s:\n" name)
              (bind ((result (pass result)))
                (format-out "%=\n" result)
                result)))
          exp
          [["macroexpansion"
            (rcurry macroexpand-all env)]
           ["alpha conversion"
            (rcurry alpha-convert env)]]))



(compile-expression '(define-function foo ((a <object>) b #rest all #key (c 23) d)
                       (bind ((when (when a b)))
                         (+ (when c d) 2)))
                    *environment*)

