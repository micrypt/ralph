
(define-module ralph/compiler2.test
  import: (ralph/test
           ralph/reader
           ralph/compiler2
           ralph/compiler2/module
           ralph/compiler2/environment
           ralph/compiler2/macroexpansion
           ralph/stream
           ralph/format
           ralph/reader2))

(define-function make-environment ()
  (bind ((module (make <module> name: "ralph/compiler2.test")))
    ;; (import-module module "ralph/core")

    (bind ((symbol-macros
            (make-plain-object)))
      (set! (get symbol-macros "foo")
            (method (_)
              `(when 23 42)))
      (chain-object symbol-macros
                    *core-symbol-macros*)
      (make <environment>
            module: module
            special-forms: *all-special-forms*
            macros: *core-macros*
            symbol-macros: symbol-macros))))

(define *environment*
  (make-environment))



;;;; core special forms

;; quote

(check-equal "special form: quote (array)"
             `(,'+ 1 (quote (,'when 1 2)) 2)
             (macroexpand-all
              '(+ 1 (quote (when 1 2) ignored) 2)
              *environment*))

(check-equal "special form: quote (symbol)"
             `(,'+ 1 (quote ,'foo) 2)
             (macroexpand-all
              '(+ 1 (quote foo) 2)
              *environment*))

;; bind

(check-equal "special form: bind"
             `(,'+ 1 (bind ((,'a (if 1 (begin 2) #f))
                            (,'foo (if 23 (begin 42) #f))
                            (,'when 3)
                            (,'c (,'when 5 6))
                            (,'bind ((,'x (,'when 7 8)))))

                       (bind ((,'y (,'when 23 42)))
                         (,'when #f ,'y))))
             (macroexpand-all
              '(+ 1 (bind ((a (when 1 2))
                           (foo foo)
                           (when 3 ignored)
                           (c (when 5 6))
                           (bind ((x (when 7 8))) ignored))
                      (bind ((y (when 23 42)))
                        (when #f y))))
              *environment*))


(check-condition "special form: bind (use of external identifier)"
                 <error>
                 (method ()
                   (macroexpand-all `(bind ((+ 1))
                                       +)
                                    *environment*)))
;; method

(check-equal "special form: method"
             `(if ,'a (begin (method (,'when (,'x ,'<y>)
                                       #rest ,'foo
                                       #key ,'key1 (,'when (if 1 (begin 2) #f)))
                               (,'when ,'b ,'c)))
                  #f)
             (macroexpand-all
              '(when a (method (when (x <y>) #rest foo #key key1 (when (when 1 2)))
                         (when b c)))
              *environment*))

(check-condition "special form: method (use of external identifier)"
                 <error>
                 (method ()
                   (macroexpand-all `(method (a +) 1)
                                    *environment*)))

;; set!

(check-equal "special form: set!"
             `(,'+ 1 (set! (if 1 (begin 2) #f)
                           (if 3 (begin 4) #f)
                           (if 5 (begin 6) #f)))
             (macroexpand-all
              '(+ 1 (set! (when 1 2) (when 3 4) (when 5 6)))
              *environment*))

;; define

(bind ((env (make-environment)))
  (check-equal "special form: define"
               `(,'+ 1
                     (define ,'x)
                     (define ,'a
                       (if 1 (begin 2) #f))
                     (define ,'when)
                     (define ,'define)
                     (define ,'b (,'when 3 4)))
               (macroexpand-all
                '(+ 1
                    (define x)
                    (define a (when 1 2))
                    (define when)
                    (define define)
                    (define b (when 3 4)))
                env))

  (check-condition "special form: method (use of external identifier)"
                   <error>
                   (method ()
                     (macroexpand-all `(define + 1)
                                      env)))

  (check-condition "special form: method (non-symbol identifier)"
                   <error>
                   (method ()
                     (macroexpand-all `(define (when 1 2) 3)
                                      env))))

;; if

(check-equal "special form: if"
             `(,'+ 1 (if (if 1 (begin 2) #f)
                         (if 3 (begin 4) #f)
                         (if 5 (begin 6) #f)))
             (macroexpand-all
              '(+ 1 (if (when 1 2)
                        (when 3 4)
                        (when 5 6)
                        ignored))
              *environment*))

;; begin

(check-equal "special form: begin"
             `(,'+ 1 (begin (if 1 (begin 2) #f)
                            (if 3 (begin 4) #f)
                            (if 5 (begin 6) #f)
                            ,'not-ignored))
             (macroexpand-all
              '(+ 1 (begin (when 1 2)
                           (when 3 4)
                           (when 5 6)
                           not-ignored))
              *environment*))

;; while

(check-equal "special form: while"
             `(,'+ 1 (while (if 1 (begin 2) #f)
                       (if 3 (begin 4) #f)
                       (if 5 (begin 6) #f)
                       ,'not-ignored))
             (macroexpand-all
              '(+ 1 (while (when 1 2)
                      (when 3 4)
                      (when 5 6)
                      not-ignored))
              *environment*))

;; handler-case

(check-equal "special form: handler-case (protected form is expanded)"
             `(,'+ 1 (handler-case
                      (begin
                       (if 1 (begin 2) #f)
                       3)))
             (macroexpand-all
              '(+ 1 (handler-case
                     (begin
                      (when 1 2)
                      3)))
              *environment*))

(check-equal "special form: handler-case (case without identifier)"
             `(,'+ 1 (handler-case 1
                      ((,'<error>) (if 2 (begin 3) #f))))
             (macroexpand-all
              '(+ 1 (handler-case 1
                     ((<error>) (when 2 3))))
              *environment*))

(check-equal "special form: handler-case (case with identifier)"
             `(,'+ 1 (handler-case 1
                      ((,'<error> condition: ,'when)
                       (,'when 2 3))))
             (macroexpand-all
              '(+ 1 (handler-case 1
                     ((<error> condition: when)
                      (when 2 3))))
              *environment*))

(check-condition "special form: handler-case (use of external identifier for condition variable)"
                 <error>
                 (method ()
                   (macroexpand-all `(handler-case 1
                                      ((<error> condition: +)
                                       (+ 1 2)))
                                    *environment*)))

(check-condition "special form: handler-case (case identifier should be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (handler-case 1
                           ((<error> condition: (when 1 2))
                            (when 3 4))))
                    *environment*)))


(check-no-error "special form: handler-case (case is an array)"
                (method ()
                  (macroexpand-all
                   '(+ 1 (handler-case 1
                          ((<error>) 2)))
                   *environment*)))

(check-condition "special form: handler-case (case should be array)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (handler-case 1
                           foo))
                    *environment*)))

(check-no-error "special form: handler-case (case binding is an array)"
                (method ()
                  (macroexpand-all
                   '(+ 1 (handler-case 1
                          ((<error>) 2)))
                   *environment*)))

(check-condition "special form: handler-case (case binding should be array)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (handler-case 1
                           (foo 2)))
                    *environment*)))

(check-equal "special form: handler-case (case binding is not expanded)"
             `(,'+ 1 (handler-case 1
                      ((,'when 1 2)
                       (if 3 (begin 4) #f))))
             (macroexpand-all
              '(+ 1 (handler-case 1
                     ((when 1 2)
                      (when 3 4))))
              *environment*))


;;;; internal special forms

;; %quote

(check-equal "special form: %quote"
             `(,'+ 1 (%quote (,'when 1 2)) 2)
             (macroexpand-all
              '(+ 1 (%quote (when 1 2) 'ignored) 2)
              *environment*))

;; %bind

(check-equal "special form: %bind"
             `(,'+ 1 (%bind (,'a (if 1 (begin 2) #f))
                       (%bind (,'when 3)
                         (%bind (,'c (,'when 5 6))
                           (%bind (,'%bind (,'x (,'when 7 8)))
                             (%bind (,'y (,'when 23 42))
                               (,'when #f ,'y)))))))
             (macroexpand-all
              '(+ 1 (%bind (a (when 1 2))
                      (%bind (when 3 'ignored)
                        (%bind (c (when 5 6))
                          (%bind (%bind (x (when 7 8)) 'ignored)
                            (%bind (y (when 23 42))
                              (when #f y)))))))
              *environment*))

(check-condition "special form: %bind (use of external identifier)"
                 <error>
                 (method ()
                   (macroexpand-all `(%bind (+ 1) +)
                                    *environment*)))


;; %method

(check-equal "special form: %method"
             `(if ,'a (begin (%method ,'test (,'when ,'x)
                               (,'when ,'b ,'c)))
                  #f)
             (macroexpand-all
              '(when a (%method test (when x)
                         (when b c)))
              *environment*))


(check-condition "special form: %method (use of external identifier)"
                 <error>
                 (method ()
                   (macroexpand-all `(%method foo (a +) 1)
                                    *environment*)))

(check-condition "special form: %method (name should be symbol)"
                 <error>
                 (method ()
                   (macroexpand-all `(%method (when x y) (a b) 1)
                                    *environment*)))

(check-condition "special form: %method (parameters should be symbol)"
                 <error>
                 (method ()
                   (macroexpand-all `(%method foo ((a <object>) b) 1)
                                    *environment*)))

;; %set

(check-equal "special form: %set"
             `(,'+ 1 (%set ,'x
                           (if 3 (begin 4) #f)))
             (macroexpand-all
              '(+ 1 (%set x
                          (when 3 4)
                          ignored))
              *environment*))

(check-condition "special form: %set (identifier shoud be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%set (when 3 4)
                                (when 3 4)))
                    *environment*)))

;; %if

(check-equal "special form: %if"
             `(,'+ 1 (%if (if 1 (begin 2) #f)
                          (if 3 (begin 4) #f)
                          (if 5 (begin 6) #f)))
             (macroexpand-all
              '(+ 1 (%if (when 1 2)
                         (when 3 4)
                         (when 5 6)
                         ignored))
              *environment*))

;; %while

(check-equal "special form: %while"
             `(,'+ 1 (%while (if 1 (begin 2) #f)
                             (if 3 (begin 4) #f)))
             (macroexpand-all
              '(+ 1 (%while (when 1 2)
                            (when 3 4)
                            ignored))
              *environment*))

;; %try

(check-equal "special form: %try"
             `(,'+ 1 (%try (if 1 (begin 2) #f)
                           ,'c
                           (if 3 (begin 4) #f)))
             (macroexpand-all
              '(+ 1 (%try (when 1 2)
                          c
                          (when 3 4)))
              *environment*))

(check-condition "special form: %try (identifier shoud be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%try (when 1 2)
                                (when 3 4)
                                (when 5 6)))
                    *environment*)))

(check-equal "special form: %try (identifier is bound in handler form)"
             `(,'+ 1 (%try (if 1 (begin 2) #f)
                           ,'when
                           (,'when 3 4)))
             (macroexpand-all
              '(+ 1 (%try (when 1 2)
                          when
                          (when 3 4)))
              *environment*))

;; %define

(bind ((env (make-environment)))
  (check-equal "special form: %define"
               `(,'+ 1 (%define ,'foo) 2)
               (macroexpand-all
                '(+ 1 (%define foo ignored) 2)
                env)))

(check-condition "special form: %define (identifier shoud be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%define (when 1 2)))
                    *environment*)))


;; %var

(check-equal "special form: %var"
             `(,'+ 1 (%var ,'foo) 2)
             (macroexpand-all
              '(+ 1 (%var foo ignored) 2)
              *environment*))

(check-condition "special form: %var (identifier shoud be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%var (when 1 2)))
                    *environment*)))

;; %native-name

(check-equal "special form: %native-name"
             `(,'+ 1 (%native-name "<foo>") 2)
             (macroexpand-all
              '(+ 1 (%native-name "<foo>" ignored) 2)
              *environment*))

(check-condition "special form: %native-name (identifier shoud be a symbol)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%native-name (when 1 2)))
                    *environment*)))

;; %native-call

(check-equal "special form: %native-call"
             `(,'+ 1 (%native-call "return" (if 1 (begin 2) #f)) 3)
             (macroexpand-all
              '(+ 1 (%native-call "return" (when 1 2)) 3)
              *environment*))

(check-condition "special form: %native-call (operator shoud be a string)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%native-call foo 1))
                    *environment*)))

;; %native

(check-equal "special form: %native"
             `(,'+ 1 (%native (if 1 (begin 2) #f)
                              "test"
                              ,'bar))
             (macroexpand-all
              '(+ 1 (%native (when 1 2)
                             "test"
                             bar))
              *environment*))


;; %object

(check-equal "special form: %object"
             `(,'+ 1 (%object "a" (if 1 (begin 2) #f)
                              "b" (if 23 (begin 42) #f)))
             (macroexpand-all
              '(+ 1 (%object "a" (when 1 2)
                             "b" foo))
              *environment*))

(check-condition "special form: %object (property shoud be a string)"
                 <error>
                 (method ()
                   (macroexpand-all
                    '(+ 1 (%object foo (when 1 2)))
                    *environment*)))

;; %array

(check-equal "special form: %array"
             `(,'+ 1 (%array (if 1 (begin 2) #f)
                             "test"
                             ,'bar))
             (macroexpand-all
              '(+ 1 (%array (when 1 2)
                            "test"
                            bar))
              *environment*))

;; %get-property

(check-equal "special form: %array"
             `(,'+ 1 (%get-property (if 1 (begin 2) #f)
                                    "test"
                                    ,'bar))
             (macroexpand-all
              '(+ 1 (%get-property (when 1 2)
                                   "test"
                                   bar))
              *environment*))





;;;; core macros


(check-equal "macro: when"
             `(,'+ 1 (if 1 (begin 2) #f))
             (macroexpand-all
              '(+ 1 (when 1 2))
              *environment*))






;; interaction between special forms, macros and symbol macros


(set! (get *environment* "symbol-macros" "bar")
      (method (_)
        'foo))

(set! (get *environment* "symbol-macros" "when2")
      (method (_)
        'when))


(check-equal "symbol macro: foo"
             `(,'+ 1 (if 23 (begin 42) #f))
             (macroexpand-all
              '(+ 1 foo)
              *environment*))



(check-equal "symbol macro at head"
             `((if 23 (begin 42) #f) ,'x ,'y)
             (macroexpand-all
              '(foo x y)
              *environment*))

(check-equal "symbol macro at head (two levels)"
             `((if 23 (begin 42) #f) ,'x ,'y)
             (macroexpand-all
              '(bar x y)
              *environment*))

(check-equal "symbol macro expanding to symbol with macro definition"
             `(if ,'x (begin ,'y) #f)
             (macroexpand-all
              '(when2 x y)
              *environment*))

(check-equal "symbol macro (two levels)"
             `(,'+ (if 23 (begin 42) #f) 2)
             (macroexpand-all
              '(+ bar 2)
              *environment*))

(check-equal "macros and special forms shadowing"
             `(,'+ 1 (bind ((,'quote
                             ;; quote special form and when macro still works
                             (if 5 (begin (quote (,'when 7 8))) #f))
                            (,'when (method (,'foo ,'b)
                                      ;; parameter foo shadows symbol macro
                                      ;; when macro still works
                                      (,'not (if ,'foo
                                                 (begin ,'b)
                                                 #f)))))
                       ;; TODO [#A]: foo only expands to when, but should completely to if:
                       ;; (,'- (if 23 (begin 42) #f) ,'xyz)
                       ;; -> expansion needs to take symbol's module into account (hygienic expansion)
                       ;; - foo is producing ralph/core::when so shouldn't clash with locally bound when
                       (,'- (when 23 42) ,'xyz)
                       ;; when binding shadows when macro
                       (,'when ,'a ,'b)
                       ;; quote special form not shadowed
                       (quote (,'when ,'a ,'b))))
             (macroexpand-all
              '(+ 1 (bind ((quote (when 5 (quote (when 7 8))))
                           (when (method (foo b) (not (when foo b)))))
                      (- foo xyz)
                      (when a b)
                      (quote (when a b))))
              *environment*))

(check-equal "identifiers shadow macros, but not special forms: method"
             `(method (,'when ,'quote ,'foo)
                ,'foo
                (quote (,'when 1 2))
                (,'when 3 4))
             (macroexpand-all
              '(method (when quote foo)
                 foo
                 (quote (when 1 2))
                 (when 3 4))
              *environment*))


(define-function read-form (source)
  (read (make <string-stream>
              string: source)))

(bind ((form (read-form "(test `(is ,cool foo::bar ,(+ 2 3) ,@[4 5 6] `(nested)))")))
  (check-equal "macroexpand-all: syntax-quote"
               (read-form
                "(test (ralph/core::%concat
                       (ralph/core::%concat
                        (ralph/core::%array (ralph/core::quote ralph/compiler2.test::is)
                                            cool
                                            (ralph/core::quote foo::bar)
                                            (+ 2 3))
                        (ralph/core::%array 4 5 6))
                       (ralph/core::%array
                        (ralph/core::%array
                         (ralph/core::quote ralph/core::syntax-quote)
                         (ralph/core::%array
                          (ralph/core::quote ralph/compiler2.test::nested))))))")
              (macroexpand-all form *environment*)))



(set! (get *environment* "special-forms")
      *internal-special-forms*)
(chain-object (get *environment* "macros")
              *internal-macros*)
(check-equal "macroexpand-all to IR: define-function"
             (read-form
              "(ralph/core::%begin
               (ralph/core::%define foo)
                 (ralph/core::%set
                  foo
                  (ralph/core::%make-function
                   (ralph/core::%native-name \"foo\")
                   (ralph/core::%method foo (a b)
                     (ralph/core::%bind (all (ralph/core::%native-call \"$SL.call\" %all-arguments 2))
                       (ralph/core::%bind ($1 (ralph/core::%keys all (ralph/core::%object \"c\" 23 \"d\" #f)))
                         (ralph/core::%bind (c (ralph/core::%get-property $1 \"c\"))
                           (ralph/core::%bind (d (ralph/core::%get-property $1 \"d\"))
                             (ralph/core::%bind (when (ralph/core::%if a b #f))
                               (when c d)))))))
                   #f)))")
             (macroexpand-all '(define-function foo ((a <object>) b #rest all #key (c 23) d)
                                 (bind ((when (when a b))) (when c d)))
                              *environment*))


