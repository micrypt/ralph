
(define-module ralph/compiler.test
  import: (ralph/test ralph/stream
           ralph/reader ralph/compiler))

(define-function make-core-environment ()
  (make <environment>
        module: (make <module> name: "__test__")
        macros: *core-macros*
        symbol-macros: *core-symbol-macros*))

(define *environment*
  (make-core-environment))

(set! (get *environment* "macros" "alpha")
      (method (_ x y)
        `(beta ,x ,y)))

(set! (get *environment* "macros" "beta")
      (method (_ x y)
        `(gamma ,x ,y)))


(check-equal "macroexpand-1: alpha"
             `(beta 1 2)
             (macroexpand-1 `(alpha 1 2) *environment*))

(check-equal "macroexpand: alpha"
             `(gamma 1 2)
             (macroexpand `(alpha 1 2) *environment*))


(check-equal "macroexpand: bind"
             `(%bind (a 1)
                (%bind (b (+ a 1))
                  b))
              (macroexpand `(bind ((a 1)
                                   (b (+ a 1)))
                              b)
                           *environment*))

(check-equal "macroexpand-1: cond"
             `(if (a)
                  (%begin 1 2)
                  (cond
                   (b 3)
                   (else: 4 5)))
              (macroexpand-1 `(cond
                               ((a) 1 2)
                               (b 3)
                               (else: 4 5))
                             *environment*))

(check-equal "macroexpand: prevent expansion of sepcial forms 2"
             `(%bind (cond
                      ((a) b)
                      (else: c))
                     d)
             (macroexpand `(%bind (cond
                                   ((a) b)
                                   (else: c))
                             d)
                          *environment*))

(check-equal "macroexpand-all: bind b"
             (symbol "b")
             (macroexpand-all `(bind ()
                                 b)
                              *environment*))


(check-equal "macroexpand-all: bind b"
             `(%bind (b (%plus a 1))
                b)
             (macroexpand-all `(bind ((b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: bind a, b"
             `(%bind (a 1)
                (%bind (b (%plus a 1))
                    b))
             (macroexpand-all `(bind ((a 1)
                                      (b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: and"
             `(%if 1 (%if #t (%if 2 (%if #f 3 #f) #f) #f) #f)
             (macroexpand-all `(and 1 #t 2 #f 3)
                              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: or"
             `(%bind ($1 #f)
                (%if $1
                     $1
                     (%bind ($2 2)
                       (%if $2
                            $2
                            3))))
             (macroexpand-all `(or #f 2 3)
                              *environment*))

(check-equal "macroexpand-all: cond"
             `(%if (a)
                   (%begin 1 2)
                   (%if b
                        3
                        (%begin 4 5)))
             (macroexpand-all `(cond
                                ((a) 1 2)
                                (b 3)
                                (else: 4 5))
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(%set x 1)
             (macroexpand-all `(set! x 1)
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(cond-setter x 1)
             (macroexpand-all `(set! (cond x) 1)
                              *environment*))


(check-equal "macroexpand-all: parallel-set! 1"
             `(%set x 1)
             (macroexpand-all `(parallel-set! x 1)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: parallel-set! 2"
             `(%bind ($1 1)
                (%begin
                 (%bind ($2 (%plus x 1))
                   (%begin
                    (%set z (%minus x y))
                    (%set y $2)))
                 (%set x $1)))
             (macroexpand-all `(parallel-set! x 1
                                              y (+ x 1)
                                              z (- x y))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: select"
             `(%bind ($1 x)
                (%if (%bind ($2 (instance? $1 <array>))
                       (%if $2
                            $2
                            (instance? $1 <string>)))
                     (%begin
                      (print x)
                      (slice x 2))
                     (%if (instance? $1 <number>)
                          (%times x 23)
                          (%begin
                           (do-sth)
                           else))))
             (macroexpand-all `(select x instance?
                                 ((<array> <string>)
                                  (print x)
                                  (slice x 2))
                                 ((<number>)
                                  (* x 23))
                                 (else:
                                  (do-sth)
                                  else))
                              *environment*))

(check-equal "macroexpand-all: prevent expansion of sepcial forms"
             `(%bind (cond ((a) b))
                d)
             (macroexpand-all `(bind ((cond
                                       ((a) b)
                                       (else: c)))
                                 d)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: bind-properties"
             `(%bind ($1 obj)
                (%bind (a (%get-property $1 "a"))
                  (%bind (b (%get-property $1 "b"))
                    (%begin
                     (first a)
                     (second b)))))
             (macroexpand-all `(bind-properties (a b) obj
                                 (first a)
                                 (second b))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: destructuring-bind"
             `(%bind (a (%get-property values 0))
                (%bind ($1 (%get-property values 1))
                  (%bind (b (%get-property $1 0))
                    (%bind (c (%get-property $1 1))
                      (%bind ($3 (%get-property $1 2))
                        (%bind (d (%get-property $3 0))
                          (%bind (e (%get-property $3 1))
                            (%bind (f (%native-call "$SL.call" $3 2))
                              (%bind ($4 (%keys f (%object "g" 1)))
                                (%bind (g (%get-property $4 "g"))
                                  (%bind ($2 (%native-call "$SL.call" $1 3))
                                    (%bind ($5 (%keys $2 (%object "h" 2)))
                                      (%bind (h (%get-property $5 "h"))
                                        (%bind (i (%get-property values 2))
                                          (foo e)))))))))))))))
             (macroexpand-all `(destructuring-bind
                                   (a (b c (d e #rest f #key (g 1)) #key (h 2)) i)
                                   values
                                 (foo e))
                              *environment*))


(check-equal "required arguments: rest and key"
             [`(a b) (symbol "r") `((c 1) (d 2))]
             (analyze-lambda-list
              `(a b #rest r #key (c 1) (d 2))))

(check-equal "required arguments: rest only"
             [`(a b) (symbol "r") []]
             (analyze-lambda-list
              `(a b #rest r)))

(check-equal "required arguments: key only"
             [`(a b) #f `((c 1))]
             (analyze-lambda-list
              `(a b #key (c 1))))

(check-equal "required arguments: none, but key"
             [[] #f `((c 1))]
             (analyze-lambda-list
              `(#key (c 1))))

(check-equal "required arguments: none"
             [[] #f []]
             (analyze-lambda-list []))


(check-equal "macroexpand-all: normal method"
             `(%method (a)
                a)
             (macroexpand-all `(method (a)
                                 a)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: method with rest and keyword arguments"
             `(%method (a b)
                (%bind (r (%native-call "$SL.call" %all-arguments 2))
                  (%bind ($1 (%keys r (%object "c" 1 "d" 2)))
                    (%bind (c (%get-property $1 "c"))
                      (%bind (d (%get-property $1 "d"))
                        (foo c))))))
             (macroexpand-all `(method (a b #rest r #key (c 1) (d 2))
                                 (foo c))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: dotimes (for, while)"
             `(%bind ($1 (%plus (%minus 3 2)))
                (%bind (i 0)
                  (%begin
                   (%while (not (>= i $1))
                     (%begin
                      ((%method (i)
                         (foo i))
                       i)
                      (%set i (%plus i 1))))
                   (%minus i 2))))
             (macroexpand-all `(dotimes (i (+ (- 3 2)) (- i 2))
                                 (foo i))
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: for-each with body"
             `(%bind ($1 (%array 1 2 3 4))
                (%bind ($2 (%array 5 6 7))
                  (%bind ($3 #f)
                    (%bind ($5 #f)
                      (%bind ($4 (%array $1 $2))
                        (%begin
                         (%while (not (%bind ($6 $3)
                                        (%if $6 $6 (any? empty? $4))))
                           (%bind (a (first $1))
                             (%bind (b (first $2))
                               (%if (%bind ($7 (> a 2))
                                      (%if $7 $7 (> b 5)))
                                    (%begin
                                     (%set $5 (%begin
                                               (foo a)
                                               (bar b)))
                                     (%set $3 #t))
                                    (%begin
                                     ((%method (a b)
                                        (baz a b))
                                      a b)
                                     (%set $1 (rest $1))
                                     (%set $2 (rest $2))
                                     (%set $4 (%array $1 $2)))))))
                         $5))))))
             (macroexpand-all
              `(for-each ((a [1 2 3 4])
                          (b [5 6 7]))
                         ((or (> a 2)
                              (> b 5))
                          (foo a)
                          (bar b))
                 (baz a b))
              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: for-each without body"
             `(%bind ($1 (%array 1 2 3))
                (%bind ($2 (%array 1 2 3))
                  (%bind ($3 #f)
                    (%bind ($5 #f)
                      (%bind ($4 (%array $1 $2))
                        (%begin
                         (%while (not (%bind ($6 $3)
                                        (%if $6 $6 (any? empty? $4))))
                           (%bind (a (first $1))
                             (%bind (b (first $2))
                               (%if (not (binary= a b))
                                 (%begin
                                  (%set $5 #t)
                                  (%set $3 #t))
                                 (%begin
                                  ((%method (a b) #f) a b)
                                  (%set $1 (rest $1))
                                  (%set $2 (rest $2))
                                  (%set $4 (%array $1 $2)))))))
                         $5))))))
             (macroexpand-all
              `(for-each ((a [1 2 3])
                          (b [1 2 3]))
                         ((not (binary= a b)) #t))
              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: backqoute"
             `(%array
               (%array (symbol "foo")
                       (symbol "bar")
                       3)
               (concatenate
                (%array (symbol "%array") 1 2)
                (%array 3 4))
               (%plus 5 6))
             (bind ((stream (make <string-stream> string:
                                  (concatenate
                                   "`((foo bar 3) "
                                   ",(concatenate `(%array 1 2) [3 4]) "
                                   ",(+ 5 6))")))
                    (exp (read stream)))
               (macroexpand-all exp
                                *environment*)))


(check-equal "macroexpand-all: symbol macros"
             `(%begin 1 (%next-method %this-method) 2)
             (macroexpand-all `(begin 1 next-method 2)
                              *environment*))



(check-equal "macroexpand-all: dot"
             `((%get-property
                ((%get-property
                  ((%get-property node "removeClass") "off")
                  "addClass")
                 "on")
                "end"))
             (macroexpand-all
              `(. node
                  ("removeClass" "off")
                  ("addClass" "on")
                  (end))
              *environment*))





(reset-symbol-counter!)
(check-equal "alpha-convert: single method"
             `(%method (a_1) 1)
             (alpha-convert `(%method (a) 1)
                            *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: nested methods"
             `((%method (a_1)
                 ((%method (a_2)
                    a_2)
                  a_1))
               1)
             (alpha-convert `((%method (a)
                                ((%method (a)
                                   a)
                                 a))
                              1)
                            *environment*))

(reset-symbol-counter!)
(check-equal "alpha-convert: define"
             `(%begin
               (%define $1)
               (bar $1)
               (%method (a_2)
                 a_2))
             (alpha-convert `(%begin
                              (%define a)
                              (bar a)
                              (%method (a)
                               a))
                            *environment*))

;; TODO: test alpha-convert for bind


;;(check-equal "beta-reduce: single argument: variable"
;;             `((%method () (+ y y)))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            y)
;;                          (make-object)))

;;(check-equal "beta-reduce: single argument: value"
;;             `((%method () (+ 1 y)))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            1)
;;                          (make-object)))

;;(check-equal "beta-reduce: single argument: expression"
;;             `((%method (x)
;;                 (+ x y))
;;               (+ x 1))
;;             (beta-reduce `((%method (x)
;;                              (+ x y))
;;                            (+ x 1))
;;                          (make-object)))

;; TODO: test beta-reduce for bind


(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all `(bind ((c 1))
                            (bind ((a 2)
                                   (b 3))
                              (- 1 c)
                              (+ a b)))
                         *environment*)))

  (check-equal ""
               `(%bind (c 1)
                  (%bind (a 2)
                    (%bind (b 3)
                      (%begin
                       (%minus 1 c)
                       (%plus a b)))))
               expanded)
  (check-equal ""
               `(%bind (c_1 1)
                  (%bind (a_2 2)
                    (%bind (b_3 3)
                      (%begin
                       (%minus 1 c_1)
                       (%plus a_2 b_3)))))
               (alpha-convert expanded
                              *environment*)))



(reset-symbol-counter!)
(bind ((expanded
        (macroexpand-all `((method (a b)
                             (+ a b))
                           1 2)
                         *environment*)))

  (check-equal ""
               `((%method (a b)
                   (%plus a b))
                 1 2)
               expanded)
  (reset-symbol-counter!)
  (check-equal ""
               `((%method (a_1 b_2)
                   (%plus a_1 b_2))
                 1 2)
               (alpha-convert expanded
                              *environment*)))

(check-true "atomic? on number" (atomic? 1))

(check-false "atomic? on array" (atomic? []))

(reset-symbol-counter!)
(check-equal "ANF: simple expression"
             `(+ 1 2)
             (normalize-term
              `(+ 1 2)))

(reset-symbol-counter!)
(check-equal "ANF: nested expression"
             `(+ (- 2 1) 2)
             (normalize-term `(+ (- 2 1) 2)))

(reset-symbol-counter!)
(check-equal "ANF: bind"
             `(%bind ($1 (%plus 2 2))
                (%bind (x 1)
                  (%bind ($2 (f x))
                    (%plus $1 $2))))
             (normalize-term
              (macroexpand-all
               `(+ (+ 2 2)
                   (bind ((x 1))
                     (f x)))
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: begin"
             `(%begin
               1
               (%begin
                (%plus 2 2)
                (%bind ($1 (%minus 3 3))
                  (%bind (x 1)
                    (%bind ($2 (f x))
                      (%plus $1 $2))))))
             (normalize-term
              (macroexpand-all
               `(begin
                 1
                 (+ (begin (+ 2 2) (- 3 3))
                    (bind ((x 1))
                      (f x))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: if: trivial expressions"
             `(%if (= n 0)
                   1
                   (%times n (f (%minus n 1))))
             (normalize-term
              (macroexpand-all
               `(if (= n 0)
                    1
                    (* n (f (- n 1))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: application"
             `(%bind (id (%method (x) x))
                (%bind (apply (%method (f x) (f x)))
                  ((id apply) (id 3))))
             (normalize-term
              (macroexpand-all
               `(bind ((id (method (x) x))
                       (apply (method (f x) (f x))))
                  ((id apply) (id 3)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: method"
             `(%method (a)
                (%method (b)
                  (%begin
                   (%minus a b)
                   (%plus (%minus a b) b))))
             (normalize-term
              (macroexpand-all
               `(method (a)
                  (method (b)
                    (- a b)
                    (+ (- a b) b)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: begin"
             `(%begin
               1
               (%begin
                (c)
                (%begin
                 (b (%plus 1 (a)))
                 (%begin
                  5
                  (%minus (d) 23)))))
             (normalize-term
              (macroexpand-all
               `(begin
                 1
                 (begin
                  (c)
                  (b (+ 1 (a))))
                 5
                 (- (d) 23))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: nested set!"
             `(%begin
               (%set a (%plus (%minus b 3) c))
               (%set x (%times (%set z a) 5)))
             (normalize-term
              (macroexpand-all
               `(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z a) 5)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression"
             `(foo-setter x (%plus 2 3))
             (normalize-term
              (macroexpand-all
               `(set! (foo x) (+ 2 3))
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: nested set! with if"
             `(%begin
               (%set a (%plus (%minus b 3) c))
               (%bind ($1 (%if a b c))
                 (%bind ($2 (%set z $1))
                   (%bind ($3 (%times $2 5))
                     (%set x $3)))))
             (normalize-term
              (macroexpand-all
               `(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z (if a b c)) 5)))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression and keywords"
             `(foo-setter x (%plus 2 3)
                         animated?: (> (bar x) 1))
             (normalize-term
              (macroexpand-all
               `(set! (foo x) (+ 2 3)
                      animated?: (> (bar x) 1))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: or"
             ;; usage of %if as expression OK,
             ;; not in statement form yet
             `(%bind ($1 #f)
                (%bind ($3 (%if $1
                                $1
                                (%bind ($2 2)
                                  (%if $2 $2 3))))
                  (foo $3 bar)))
             (normalize-term
              (macroexpand-all
               `(foo (or #f 2 3) bar)
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: while"
             `(%bind (counter 5)
                (%bind (result 1)
                  (%begin
                   (%while (> counter 0)
                     (%begin
                      (%set factorial (%times factorial counter))
                      (%set counter (%minus counter 1))))
                   counter)))
             (normalize-term
              (macroexpand-all
               `(bind ((counter 5)
                       (result 1))
                  (while (> counter 0)
                    (set! factorial (* factorial counter))
                    (set! counter (- counter 1)))
                  counter)
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: while as expression"
             `(%bind (run? #t)
                (%bind (value (%while run?
                                (%begin (foo)
                                  (%begin
                                   (%set run? #f)
                                   23))))
                  (== value #f)))
             (normalize-term
              (macroexpand-all
               `(bind ((run? #t)
                       (value
                        (while run?
                          (foo)
                          (set! run? #f)
                          23)))
                  (== value #f))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: while in if"
             `(%bind ($1 (%while run? (foo)))
                (%bind (x (%if $1 42 23))
                  (bar x)))
             (normalize-term
              (macroexpand-all
               `(bind ((x (if (while run?
                                (foo))
                              42
                              23)))
                  (bar x))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: if in while"
             `(%while #t
                (%begin
                 (%bind ($1 (foo))
                   (%bind ($2 (%if $1 $1 (bar)))
                     (%if $2
                          (baz)
                          (%native "break"))))))
             (normalize-term
              (macroexpand-all
               `(while (or (foo) (bar))
                  (baz))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: begin as expression"
             `(%bind ($1 (curry + 1))
                (%begin
                 1
                 (%bind ($2 (%plus 2 3))
                   ($1 $2 4))))
             (normalize-term
              (macroexpand-all
               `((curry + 1) (begin 1 (+ 2 3)) 4)
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: select"
             `(%bind ($1 x)
                (%bind ($2 (instance? $1 <array>))
                  (%bind ($3 (%if $2 $2 (instance? $1 <string>)))
                    (%if $3
                         (%begin
                          (print x)
                          (slice x 2))
                         (%if (instance? $1 <number>)
                              (%times x 23)
                              (%begin
                               (do-sth)
                               else))))))
             (normalize-term
              (macroexpand-all `(select x instance?
                                  ((<array> <string>)
                                   (print x)
                                   (slice x 2))
                                  ((<number>)
                                  (* x 23))
                                  (else:
                                   (do-sth)
                                   else))
                               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: if in expression"
             `(%method ()
                (bar (%method (item)
                       (%bind ($1 (%if a b c))
                         (baz $1 item)))))
             (normalize-term
              (macroexpand-all
               `(method ()
                  (bar (method (item)
                         (baz (if a b c)
                              item))))
               *environment*)))

(reset-symbol-counter!)
(check-equal "ANF: if in expression 2"
             `(%method ()
                (bar (%method (item)
                       (%bind ($1 (%if c b a))
                         (%bind ($2 (%if a b c))
                           ($1 $2 item))))))
             (normalize-term
              (macroexpand-all
               `(method ()
                  (bar (method (item)
                         ((if c b a)
                          (if a b c)
                          item))))
               *environment*)))


(reset-symbol-counter!)
(check-equal "ANF: while in if in exp"
             `(%bind ($1 (%while run? (foo)))
                (%bind ($2 (%if $1 42 23))
                  (foo $2)))
             (normalize-term
              (macroexpand-all
               `(foo (if (while run?
                           (foo))
                         42
                         23))
               *environment*)))

(reset-symbol-counter!)
(check-equal "statements: or"
             `(%bind ($1 #f)
                (%bind ($3 #f)
                  (%begin
                   (%if ((%native "$T") $1)
                        (%set $3 $1)
                        (%bind ($2 2)
                          (%if ((%native "$T") $2)
                               (%set $3 $2)
                               (%set $3 3))))
                   (foo $3 bar))))
              (transform-statements
               (normalize-term
                (macroexpand-all
                 `(foo (or #f 2 3) bar)
                 *environment*))
               *environment*))

(reset-symbol-counter!)
(check-equal "statements: if exp. in if stmt."
             `(%bind ($1 #f)
                (%begin
                 (%if ((%native "$T") a)
                      (%set $1 1)
                      (%set $1 2))
                 (%if ((%native "$T") $1)
                      3
                      4)))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(if (if a 1 2) 3 4)
                 *environment*))
               *environment*))

(reset-symbol-counter!)
(check-equal "statements: while exp. in while stmt."
             `(%while ((%native "$T") (> a 2))
                (%bind (a #f)
                  (%begin
                   (%begin
                    (%while ((%native "$T") (< b 3))
                      (%if ((%native "$T")  a)
                           (%bind (c #f)
                             (%begin
                              (%if ((%native "$T") c)
                                   (%set c 5)
                                   (%set c 6))
                              c))
                           #f))
                    (%set a #f))
                   4)))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(while (> a 2)
                    (bind ((a (while (< b 3)
                                (if a
                                    (bind ((c (if c 5 6)))
                                      c)
                                    #f))))
                      4))
                 *environment*))
               *environment*))


(reset-symbol-counter!)
(check-equal "statements: value of while applied to method"
             `(%bind (y 5)
                (%bind ($1 (%method (x)
                             (%if ((%native "$T") x)
                                  (%return 1)
                                  (%return 2))))
                  (%bind ($2 #f)
                    (%begin
                     (%begin
                      (%while ((%native "$T") (> y 2))
                        (%set y (%minus y 1)))
                      (%set $2 #f))
                     ($1 $2)))))
             (transform-statements
               (normalize-term
                (macroexpand-all
                 `(bind ((y 5))
                    ((method (x) (if x 1 2))
                     (while (> y 2)
                       (dec! y))))
                 *environment*))
               *environment*))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: simple"
               `(%bind ($1 (symbol "a"))
                  $1)
               (lift-symbols
                (macroexpand-all
                 `(begin (symbol "a"))
                 module)
                module)))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: multiple uses"
               `(%bind ($1 (symbol "a"))
                  (%bind ($2 (symbol "b"))
                    (%bind ($3 (symbol "c"))
                      (%bind (a $1)
                        (%bind (b $2)
                          (foo a $1 b $2 $3))))))
               (lift-symbols
                (macroexpand-all
                 `(bind ((a (symbol "a"))
                         (b (symbol "b")))
                    (foo
                     a (symbol "a")
                     b (symbol "b")
                     (symbol "c")))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: bind"
               `(%bind ($1 (symbol "a"))
                  (%begin
                   $1
                   (%bind (symbol "a")
                     (%bind (a $1)
                       (foo a $1)))))
               (lift-symbols
                (macroexpand-all
                 `(begin
                   (symbol "a")
                   (bind ((symbol "a"))
                     (bind ((a (symbol "a")))
                       (foo a (symbol "a")))))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: method"
               `(%bind ($1 (symbol "a"))
                  (%begin
                   23
                   (%method (x)
                     $1)))
               (lift-symbols
                (macroexpand-all
                 `(begin
                   23
                   (method (x)
                     (symbol "a")))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: method"
               `(%method (symbol)
                  symbol)
               (lift-symbols
                (macroexpand-all
                 `(method (symbol)
                    symbol)
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: set!"
               `(%bind ($1 (symbol "b"))
                  (symbol-setter "a" $1))
               (lift-symbols
                (macroexpand-all
                 `(set! (symbol "a")
                        (symbol "b"))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-symbols: begin, if, while"
               `(%bind ($1 (symbol "a"))
                  (%bind ($2 (symbol "b"))
                    (%bind ($3 (symbol "c"))
                      (%begin
                        (%if $1
                             (%while (bar $2)
                               (%begin $1 23 $3))
                             $3)
                        $2))))
               (lift-symbols
                (macroexpand-all
                 `(begin
                   (if (symbol "a")
                       (while (bar (symbol "b"))
                         (symbol "a")
                         23
                         (symbol "c"))
                       (symbol "c"))
                   (symbol "b"))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "flatten-statements"
               `(%begin
                 (%var ($1 (symbol "a"))
                       ($2 (symbol "b"))
                       ($3 (symbol "c")))
                 (%if $1
                      (%while (bar $2)
                        (%begin $1 23 $3))
                      $3)
                 $2)
               (flatten-statements
                (lift-symbols
                 (macroexpand-all
                  `(begin
                    (if (symbol "a")
                        (while (bar (symbol "b"))
                          (symbol "a")
                          23
                          (symbol "c"))
                        (symbol "c"))
                    (symbol "b"))
                  module)
                 module))))


(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-defines: simple"
               `(%begin
                 (%define x)
                 (%set x 1))
               (lift-defines
                (macroexpand-all
                 `(define x 1)
                 module)
                module)))

(bind ((module (make-core-environment)))
  (check-equal "lift-defines: nested"
               `(%begin
                 (%define x)
                 (%if (foo 1)
                      (%set x 1)
                      #f))
               (lift-defines
                (macroexpand-all
                 `(when (foo 1)
                    (define x 1))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "lift-defines: multiple"
               `(%begin
                 (%define x)
                 (%if (foo 1)
                      (%set x 1)
                      (%set x 2)))
               (lift-defines
                (macroexpand-all
                 `(if (foo 1)
                      (define x 1)
                      (define x 2))
                 module)
                module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of prior definition"
               `(%begin
                 (%define foo)
                 (%begin
                  (%define bar)
                  (%begin
                   (%bind (bar 42)
                     (%set foo (%infix "+" 23 bar)))
                   (%set bar foo)
                   bar
                   foo)))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   `(begin
                     (bind ((bar 42))
                       (define foo (%infix "+" 23 bar)))
                     (define bar foo)
                     bar
                     foo)
                   module)
                  module)
                 module)))

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of future definition"
               `(%begin
                 (%define foo)
                 (%begin
                  (%define bar)
                  (%begin
                   (%set foo (%method () (bar)))
                   (%set bar (%method () 1))
                   (foo))))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   `(begin
                     (define foo
                       (method ()
                         (bar)))
                     (define bar
                       (method ()
                         1))
                     (foo))
                   module)
                  module)
                 module)))

;;

(reset-symbol-counter!)
(bind ((module (make-core-environment)))
  (check-equal "define free variables: use of undefined identifier"
               `(%begin
                 (%define bar2)
                 (%begin
                  (%define foo2)
                  (%set foo2 (%method ()
                               (bar2)))))
               (define-free-variables
                 (lift-defines
                  (macroexpand-all
                   `(define foo2
                      (method ()
                        (bar2)))
                   module)
                  module)
                 module)))


;;

(compile-expression
 `((bind ((x (method (y)
               (next-method 3)
               (+ 1 y))))
     (if (symbol "a")
         (while (bar (symbol "b"))
           (symbol "a")
           (x 2)
           (make-object "a" 1 "null" 2)
           (symbol "c"))
           (symbol "c"))
     (symbol "b")))
 *environment*)

(compile-expression
 `((. node
      ("removeClass" "off")
      ("addClass" "on")
      (end)))
 *environment*)

(compile-expression
 `((. 23 ("valueOf")))
 *environment*)

(compile-expression
 `((what foo: 42 about: #rest foo: 2))
 *environment*)

(compile-expression
 `((define foo #f)
   (when (not foo)
     (unless foo
       (bind ((not (method (x) x)))
         (unless foo
           #t)))))
 *environment*)


